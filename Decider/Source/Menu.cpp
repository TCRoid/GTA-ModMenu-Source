
#pragma once
#include "stdafx.h"
#include "Functions.h"
#include "Online.h"
#include "Hooking.h"
#include "list.h"
#include "protection.h"
#include "GUI.h"
#pragma execution_character_set("utf-8")
int crashPlayerTimer;
bool crashPlayerEvent = false;
int selectedPlayer;
int TimePD;
int player;
Cam cam;
bool setcarmax = false;
bool deletelastcar = true;
bool setpedintocar = true;
bool setvehgodmode = false;
Vector3 CombineVector(float x, float y, float z)
{
	Vector3 returnVector;
	returnVector.x = x;
	returnVector.y = y;
	returnVector.z = z;
	return returnVector;
}
Vector3 rotDirection(Vector3* rot)
{
	float radianz = rot->z * 0.0174532924f;
	float radianx = rot->x * 0.0174532924f;
	float num = std::abs((float)std::cos((double)radianx));

	Vector3 dir;

	dir.x = (float)((double)((float)(-(float)std::sin((double)radianz))) * (double)num);
	dir.y = (float)((double)((float)std::cos((double)radianz)) * (double)num);
	dir.z = (float)std::sin((double)radianx);

	return dir;
}
void setFrameFlag(uint32_t flag)
{
	auto actual = Memory::get_value<uint32_t>({ 0x8, 0x10B8, 0x1F8 });
	Memory::set_value<uint32_t>({ 0x8, 0x10B8, 0x1F8 }, actual |= flag);
}
void Animation(char* animation, char* animationid)
{
	int player = PLAYER::PLAYER_PED_ID();
	RequestControlOfEnt(player);
	STREAMING::REQUEST_ANIM_DICT(animation);
	if (STREAMING::HAS_ANIM_DICT_LOADED(animation))
	{
		AI::TASK_PLAY_ANIM(player, animation, animationid, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
	}
}
void ClearAnimation()
{
	int player = PLAYER::PLAYER_PED_ID();
	AI::CLEAR_PED_TASKS_IMMEDIATELY(player);
}
Vector3 addVector(Vector3 vector, Vector3 vector2) {
	vector.x += vector2.x;
	vector.y += vector2.y;
	vector.z += vector2.z;
	vector._paddingx += vector2._paddingx;
	vector._paddingy += vector2._paddingy;
	vector._paddingz += vector2._paddingz;
	return vector;
}
double DegreeToRadian(double n)
{
	return n * 0.017453292519943295;
}
Vector3 RotationToDirection(Vector3 rot) {
	double num = DegreeToRadian(rot.z);
	double num2 = DegreeToRadian(rot.x);
	double val = cos(num2);
	double num3 = abs(val);
	rot.x = (float)(-(float)sin(num) * num3);
	rot.y = (float)(cos(num) * num3);
	rot.z = (float)sin(num2);
	return rot;

}
Vector3 multiplyVector(Vector3 vector, float inc) {
	vector.x *= inc;
	vector.y *= inc;
	vector.z *= inc;
	vector._paddingx *= inc;
	vector._paddingy *= inc;
	vector._paddingz *= inc;
	return vector;
}
void notify(char* str, ...) {
	va_list list;
	char Str[512];
	char Params[512];
	va_start(list, str);
	_vsnprintf_s(Params, sizeof(Params), str, list);
	va_end(list);
	sprintf_s(Str, "%s", Params);
	UI::SET_TEXT_OUTLINE();
	UI::_SET_NOTIFICATION_TEXT_ENTRY((char*)"STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(Str);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
}
void MaxUpgrades(uint veh)
{
	VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(veh, 18, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(veh, 22, 1);
	VEHICLE::SET_VEHICLE_MOD(veh, 16, 5, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 12, 2, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 11, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 14, 14, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 15, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 13, 2, 0);
	VEHICLE::SET_VEHICLE_WHEEL_TYPE(veh, 6);
	VEHICLE::SET_VEHICLE_WINDOW_TINT(veh, 5);
	VEHICLE::SET_VEHICLE_MOD(veh, 23, 19, 1);
	VEHICLE::SET_VEHICLE_MOD(veh, 0, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 1, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 2, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 3, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 4, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 5, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 6, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 7, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 8, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 9, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 10, 1, 0);
	VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 0, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 1, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 2, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 3, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 4, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 5, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 6, 1);
	VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 7, 1);
	VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
	VEHICLE::TOGGLE_VEHICLE_MOD(veh, 20, 1);
	VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
	VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(veh, 0, 0, 0);
	STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
	STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_clown_appears");
}
void deletecar(int Client = PLAYER::PLAYER_ID())
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			if (ENTITY::DOES_ENTITY_EXIST(playerVeh))
			{
				ENTITY::SET_ENTITY_AS_MISSION_ENTITY(playerVeh, 1, 1);
				VEHICLE::DELETE_VEHICLE(&playerVeh);
			}
		}
	}
}
void ClonePlayer(Player selectedPed)
{
	const int maxPed = 2;
	Ped ClonePed[maxPed];
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	Vector3 selectedPedPosition = ENTITY::GET_ENTITY_COORDS(selectedPed, FALSE);
	Vector3 selectedPosition = ENTITY::GET_ENTITY_COORDS(playerPed, FALSE);
	ClonePed[1] = PED::CLONE_PED(selectedPed, ENTITY::GET_ENTITY_HEADING(playerPed), true, true);
}
void shootobj(char* hash)
{
	Hash obj = GAMEPLAY::GET_HASH_KEY(hash);
	Player player_ped = PLAYER::PLAYER_PED_ID();
	STREAMING::REQUEST_MODEL(obj);
	if (ENTITY::DOES_ENTITY_EXIST(player_ped) && PED::IS_PED_SHOOTING_IN_AREA)
	{
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(player_ped, &pos))
		{
			OBJECT::CREATE_OBJECT(obj, pos.x, pos.y, pos.z, true, false, false);
		}
	}
}
bool checkModel(Hash hash) {
	model_check_bypass(true);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(hash)) {
		if (STREAMING::IS_MODEL_VALID(hash)) {
			STREAMING::REQUEST_MODEL(hash);
			while (!STREAMING::HAS_MODEL_LOADED(hash)) {
				WAIT(0);
			}
			return true;
		}
	}
	return false;
	model_check_bypass(false);
}
//刷车
void createveh(char* car_tag)
{
	globalHandle(4270934).As<bool>() = true;
	*Hooking::getGlobalPatern(4268190) = 1;
	*(int*)Hooking::getGlobalPatern(1628955 + PLAYER::GET_PLAYER_INDEX()) |= (1 << 3);
	Hash vehicle_hash = GAMEPLAY::GET_HASH_KEY(car_tag);
	if (checkModel(vehicle_hash)) {
		Vector3 pos = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0, 6.0, 1);
		model_spawn_bypass(true);
		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehicle_hash, pos.x, pos.y, pos.z, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), true, true);
		model_spawn_bypass(false);
		VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
		WAIT(120);
		if (setvehgodmode)
		{
			ENTITY::SET_ENTITY_INVINCIBLE(veh, true);
			VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(veh, false);
		}
		if (setpedintocar)
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
		}
		if (deletelastcar)
		{
			Vehicle veh = VEHICLE::GET_LAST_DRIVEN_VEHICLE();
			VEHICLE::DELETE_VEHICLE(&veh);
		}
		if (setcarmax)
		{
			int vehid = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
			MaxUpgrades(vehid);
		}
		ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
	}
}
void spawncartoplayer(std::string vehicle)
{
	globalHandle(4270934).As<bool>() = true;
	globalHandle(4268190) = 1;
	globalHandle(1628955 + PLAYER::GET_PLAYER_INDEX()) = (1 << 3);
	Hash model = GAMEPLAY::GET_HASH_KEY((char*)_strdup(vehicle.c_str()));
	if (STREAMING::IS_MODEL_VALID(model) && STREAMING::IS_MODEL_A_VEHICLE(model))
	{
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(1);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 5.0, 1);
		float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, coords.x, coords.y + 5.0f, coords.z, heading, true, true);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		ENTITY::SET_ENTITY_CAN_BE_DAMAGED(veh, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
	}
}
void ChangeCoords(Vector3 Coords)
{
	int Handle = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
	{
		ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(Handle, false), Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
	}
	else
	{
		ENTITY::SET_ENTITY_COORDS(Handle, Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
	}
}
bool spectate = false;
void Spectate(int Client = PLAYER::PLAYER_ID())
{
	if (spectate)
	{
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(true, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
	}
	else
	{
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(false, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
	}
}
void RequestingControl(Entity e)
{
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
	if (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(e))
		WAIT(0);
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
}
char* CharKeyboard(char* windowName = "", int maxInput = 21, char* defaultText = "") {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "", "", defaultText, "", "", "", maxInput);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return "";
	return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
}
int NumberKeyboard() {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(1, "", "", "", "", "", "", 10);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return 0;
	return atof(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
}
bool checkAnim(char* dict) {
	if (!STREAMING::HAS_ANIM_DICT_LOADED(dict)) {
		STREAMING::REQUEST_ANIM_DICT(dict);
		while (!STREAMING::HAS_ANIM_DICT_LOADED(dict)) {
			WAIT(0);
		}
		return true;
	}
}
int IconNotification(char* text, char* text2, char* Subject,...)
{
	char buf[2048] = { 0 };
	va_list va_alist;
	va_start(va_alist, text);
	vsprintf_s(buf, text, va_alist);
	va_end(va_alist);
	char buff2[2048] = { 0 };
	sprintf_s(buff2, "%s", buf);
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::_SET_NOTIFICATION_BACKGROUND_COLOR(140);//6 = red 	184 = green   190 = yellow
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(buff2);
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG("CHAR_LESTER_DEATHWISH", "CHAR_LESTER_DEATHWISH", false, 7, text2, Subject, 1.0, "___Menu");
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
	return UI::_DRAW_NOTIFICATION(1, 1);
}
void UnlockAll()
{
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_ENEMYDRIVEBYKILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_USJS_FOUND"), 50, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINALLRACEMODES"), 1, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_KILLS_PLAYERS"), 1000, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 21, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 60, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_RACES_WON"), 101, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_NO_ARMWRESTLING_WINS"), 21, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMATTGANGHQ"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 50000, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 51, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMFULLYMODDEDCAR"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_DM_TOTAL_DEATHS"), 412, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 623, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 63, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_WINS"), 13, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GTA_RACES_WON"), 12, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GOLF_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TENNIS_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TENNIS_MATCHES_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_WON"), 101, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_LOST"), 36, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_25_KILLS_STICKYBOMBS"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_50_KILLS_GRENADES"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_AWD_20_KILLS_MELEE"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CMBTPISTOL_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PISTOL50_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_APPISTOL_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MICROSMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_ASLTRIFLE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CRBNRIFLE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_ADVRIFLE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CMBTMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_ASLTMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PUMP_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SAWNOFF_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_BULLPUP_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSHTGN_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SNIPERRFL_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_HVYSNIPER_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_GRNLAUNCH_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_RPG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MINIGUNS_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SMKGRENADE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_STKYBMB_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TORSO"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_DECL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TORSO"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_DECL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STAM"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STRN"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_LUNG"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_DRIV"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_FLY"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_SHO"), 100, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STL"), 100, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_ENEMYDRIVEBYKILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_USJS_COMPLETED"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_USJS_FOUND"), 50, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINALLRACEMODES"), 1, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINEVERYGAMEMODE"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_DB_PLAYER_KILLS"), 1000, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_KILLS_PLAYERS"), 1000, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMHORDWAVESSURVIVE"), 21, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_MVP"), 60, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_HOLD_UP_SHOPS"), 20, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_RACES_WON"), 101, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_NO_ARMWRESTLING_WINS"), 21, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMATTGANGHQ"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMBBETWIN"), 50000, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 51, 1);
	STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMFULLYMODDEDCAR"), 1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_TOTALKILLS"), 500, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_DM_TOTAL_DEATHS"), 412, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_PLAYER_HEADSHOTS"), 623, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 63, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_WINS"), 13, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_GTA_RACES_WON"), 12, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_GOLF_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_TG_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_RT_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_CT_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TENNIS_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TENNIS_MATCHES_WON"), 2, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_RACES_WON"), 101, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_RACES_LOST"), 36, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_25_KILLS_STICKYBOMBS"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_50_KILLS_GRENADES"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_GRENADE_ENEMY_KILLS"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_AWD_20_KILLS_MELEE"), 50, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MOLOTOV_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CMBTPISTOL_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_PISTOL50_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_APPISTOL_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MICROSMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_ASLTSMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_ASLTRIFLE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CRBNRIFLE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_ADVRIFLE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CMBTMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_ASLTMG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_PUMP_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SAWNOFF_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_BULLPUP_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_ASLTSHTGN_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SNIPERRFL_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_HVYSNIPER_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_GRNLAUNCH_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_RPG_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MINIGUNS_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_GRENADE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SMKGRENADE_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_STKYBMB_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_MOLOTOV_ENEMY_KILLS"), 600, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TORSO"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_DECL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TORSO"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_DECL"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_REV_DA_IN_POSSESSION"), -1, 1);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STAM"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STRN"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_LUNG"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_DRIV"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_FLY"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_SHO"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STL"), 100, 0);
	STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VEHICLE_ID_ADMIN_WEB"), 117401876, 1);
	notify("~g~解锁完成！");
}
void stealOutfit()
{

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Ped theirPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);

	for (int i = 0; i < 12; i++)
	{
		PED::SET_PED_COMPONENT_VARIATION(playerPed, i, PED::GET_PED_DRAWABLE_VARIATION(theirPed, i),
			PED::GET_PED_TEXTURE_VARIATION(theirPed, i),
			PED::GET_PED_PALETTE_VARIATION(theirPed, i));
		for (int i = 0; i < 2; i++)
		{
			WAIT(0);
		}
	}
}
void ChangeModel(char* name) {
	Hash h = GAMEPLAY::GET_HASH_KEY(name);
	if (checkModel(h))
	{
		PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), h);
	}
}
Vector3 get_mission_objective()
{
	Vector3 blipCoords;

	for (Blip x = UI::GET_FIRST_BLIP_INFO_ID(1); UI::DOES_BLIP_EXIST(x) != 0; x = UI::GET_NEXT_BLIP_INFO_ID(1))
	{
		if (UI::GET_BLIP_COLOUR(x) == 0x42 || UI::GET_BLIP_COLOUR(x) == 0x5 || UI::GET_BLIP_COLOUR(x) == 0x3C || UI::GET_BLIP_COLOUR(x) == 0x2)
		{
			blipCoords = UI::GET_BLIP_COORDS(x);
			break;
		}
	}
	for (Blip y = UI::GET_FIRST_BLIP_INFO_ID(38); UI::DOES_BLIP_EXIST(y) != 0; y = UI::GET_NEXT_BLIP_INFO_ID(38))
	{
		if (UI::GET_BLIP_COLOUR(y) == 0x0)
		{
			blipCoords = UI::GET_BLIP_COORDS(y);
			break;
		}
	}
	for (Blip z = UI::GET_FIRST_BLIP_INFO_ID(431); UI::DOES_BLIP_EXIST(z) != 0; z = UI::GET_NEXT_BLIP_INFO_ID(431))
	{
		if (UI::GET_BLIP_COLOUR(z) == 0x3C)
		{
			blipCoords = UI::GET_BLIP_COORDS(z);
			break;
		}
	}

	return blipCoords;
}
void tp_to_objective()
{
	Vector3 coords = get_mission_objective();

	if (coords.x == 0 && coords.y == 0)
	{
		return;
	}

	// get entity to teleport
	Entity entity = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(entity, 0))
	{
		entity = PED::GET_VEHICLE_PED_IS_USING(entity);
	}
	bool worldLevel = false;
	static float groundCheckHeight[] =
	{ 100.0, 150.0, 50.0, 0.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0 };
	for (int i = 0; i < 800 / sizeof(float); i++)
	{
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(entity, coords.x, coords.y, groundCheckHeight[i], 0, 0, 1);

		if (GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(coords.x, coords.y, groundCheckHeight[i], &coords.z, 0))
		{
			worldLevel = true;
			coords.z += 3.0;
			break;
		}
	}
	if (!worldLevel)
	{
		coords.z = 1000.0;
		WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xFBAB5776, 1, 0);
	}

	teleport_to_coords(PLAYER::PLAYER_PED_ID(), coords);
}
bool kickplayer(int selectedPlayer,int type)
{
	if (type == 1)
	{
		DWORD64 args[2] = { KICK_2IMP, selectedPlayer };
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 2, 1 << selectedPlayer);
	}
	else if (type == 2)
	{
		DWORD64 args[4] = { KICK_4XF, selectedPlayer };
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << selectedPlayer);
	}
	else if (type == 3)//主机踢
	{
		NETWORK::NETWORK_SESSION_KICK_PLAYER(selectedPlayer);
	}
	else if (type == 4)//off-host kick
	{
		DWORD64 args[2] = { 1152017566 ,selectedPlayer };
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 2, 1 << selectedPlayer);
	}
	else if (type == 5)
	{
		DWORD64 args[2] = { 297770348 ,selectedPlayer };
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 2, 1 << selectedPlayer);
	}
	else if (type == 6)
	{
		DWORD64 args[2] = { -1246838892 ,selectedPlayer };
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 2, 1 << selectedPlayer);
	}
	else if (type == 7)
	{
		DWORD64 args[2] = { -2120750352 ,selectedPlayer };
		SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 2, 1 << selectedPlayer);
	}
	return true;
}
bool is_ped_shooting(Ped ped) 
{
	Vector3 coords = ENTITY::GET_ENTITY_COORDS(ped, 1);
	return PED::IS_PED_SHOOTING_IN_AREA(ped, coords.x, coords.y, coords.z, coords.x, coords.y, coords.z, true, true);
}
void JoinSession(int Id)
{
	if (Id == -1)
	{
		globalHandle(1312443).At(2).As<int>() = Id;
		globalHandle(1312443).As<int>() = 1;
		WAIT(200);
		globalHandle(1312443).As<int>() = 0;
	}
	else
	{
		globalHandle(1312860).As<int>() = Id;
		globalHandle(1312443).As<int>() = 1;
		WAIT(200);
		globalHandle(1312443).As<int>() = 0;
	}
}
void callMerryweather(std::ptrdiff_t index)
{
	globalHandle(2544210).At(index).As<int>() = 1;
}
//Fetures
#pragma region boolfeature
bool nightvision = false;
bool thermalvision = false;
bool FPSdrop = false;
bool explodnearped = false;
bool godmode = false;
bool neverwanted = false;
bool superjump = false;
bool invisible = false;
bool superrun = false;
bool superswim = false;
bool noragdoll = false;
bool noclip = false;
bool tinyplayer = false;
bool slowmode = false;
bool firebreath = false;
bool explosiveammo = false;
bool teleportgun = false;
bool rapidfire = false;
bool deletegun = false;
bool unlimitedammo = false;
bool vehiclegodmode = false;
bool vehicleboost = false;
bool freezeplayer = false;
bool gravity = false;
bool hidehud = false;
bool enableradio = false;
bool driveonwater = false;
bool watershoot = false;
bool fireworkammo = false;
bool rainbowgun = false;
bool aimbot = false;
bool invisiblecar = false;
bool displayfps = false;
bool explodnearcar = false;
bool ESPname = false;
bool superman = false;
bool walkonwater = false;
bool boostnearcar = false;
bool deletenearcar = false;
bool flycar = false;
bool airstrikegun = false;
bool fireloop = false;
bool waterloop = false;
bool teleportwayhotkey = true;
bool securitycam = false;
bool explosionloop = false;
bool tptoobjecthotkey = true;
bool disablephone = false;
bool rainbowcar = false;
bool rocketgun = false;
bool enginealwayson = false;
bool RPGgun = false;
bool flycarv2 = false;
bool fireshoot = false;
bool crashloop = false;
bool fixcarloop = false;
bool espbox = false;
bool grvgun = false;
bool copingorn = false;
bool displaycoord = true;
bool espline = false;
bool selfespline = false;
bool selfespbox = false;
bool selfespname = false;
bool oneshoot = false;
bool onemelee = false;
bool deatheye = false;
bool aimcross = false;
bool CN = false;
bool autoteleport = true;
bool kickgun = false;
bool boxgun = false;
bool barriergun = false;
bool barrier2gun = false;
bool containergun = false;
bool containergun2 = false;
bool containergun3 = false;
bool lampgun = false;
bool cargoplanespam = false;
bool franklinspam = false;
bool cargobobspam = false;
bool stockadespam = false;
bool halfaph = false;
bool SpeedoBool = false;
bool MPH = true;
bool PlateMPH = true;
bool notifyvotekick = true;
bool firegun = false;
bool smokegun = false;
bool killpeds = false;
bool blockobjCrash = false;
bool blockPedCrash = false;
bool blockvehCrash = false;
bool antiattachment = false;
bool blockallentity = false;
bool anticargoplane = false;
bool anticage = false;
bool anticeokick = false;
bool antiSPKick = false;
bool antiapartmenttp = false;
bool antiremotebounty = false;
bool antiremotevehkick = false;
bool antiremoteforcemission = false;
bool antireport = false;
bool antikick = false;
bool antifreeze = false;
bool antiexplosion = false;
bool antisound = false;
bool antistar = false;
bool antistat = false;
bool antigiveweapon = false;
bool antiremoveweapon = false;
bool antifire = false;
bool antidrop = false;
bool antiPTFX = false;
bool antiinvite = false;
bool blockallnetworkevents = false;
bool antivotekick = false;
bool antirequsetcontrol = false;
bool deleteNPC = false;
bool friendlyshoot = false;
bool rainbowneno = false;
bool rainbowsmoke = false;
#pragma endregion
void Features()
{
	//-------自我-------//
	if (godmode)
	{
		ENTITY::SET_ENTITY_INVINCIBLE(PLAYER::PLAYER_PED_ID(), true);
		MenuConfig::ConfigSave();
	}
	else
	{
		ENTITY::SET_ENTITY_INVINCIBLE(PLAYER::PLAYER_PED_ID(), false);
		MenuConfig::ConfigSave();
	}
	if (neverwanted)
	{
		PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_PED_ID());
		PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID());
		PLAYER::SET_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_PED_ID(), 0, true);
		PLAYER::SET_MAX_WANTED_LEVEL(0);
		PLAYER::SET_POLICE_IGNORE_PLAYER(PLAYER::PLAYER_PED_ID(), true);
		PLAYER::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(PLAYER::PLAYER_PED_ID(), false);
		PLAYER::SET_EVERYONE_IGNORE_PLAYER(PLAYER::PLAYER_PED_ID(), true);
		PLAYER::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(PLAYER::PLAYER_PED_ID(), true);
		MenuConfig::ConfigSave();
	}
	else
	{
		PLAYER::SET_MAX_WANTED_LEVEL(5);
		MenuConfig::ConfigSave();
	}
	if (superjump)
	{
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_PED_ID());
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_ID());
		MenuConfig::ConfigSave();
	}
	else {
		NULL;
		MenuConfig::ConfigSave();
	}
	if (invisible)
	{
		ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), false, 0);
		MenuConfig::ConfigSave();
	}
	else
	{
		ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, 0);
		MenuConfig::ConfigSave();
	}
	if (superrun)
	{
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_ID(), 1.49);
		MenuConfig::ConfigSave();
	}
	else
	{
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_ID(), 1);
		MenuConfig::ConfigSave();
	}
	if (superswim)
	{
		PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_PED_ID(), 1.49);
		PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_ID(), 1.49);
	}
	else
	{
		PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_PED_ID(), 1);
		PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_ID(), 1);
	}
	if (noragdoll)
	{
		PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_PED_ID(), false);
		MenuConfig::ConfigSave();
	}
	else
	{
		PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_PED_ID(), true);
		MenuConfig::ConfigSave();
	}
	if (noclip)
	{
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerPed, false);
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
		if (GetAsyncKeyState(0x57) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 268)) { //w
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
			float xVec = fivef * sin((heading)) * -1.0f;
			float yVec = fivef * cos((heading));

			ENTITY::GET_ENTITY_HEADING(playerPed);
			pos.x -= xVec, pos.y -= yVec;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
		}
		if (GetAsyncKeyState(0x53) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 269)) {  //s
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
			float xVec = fivef * sin(degToRad(heading)) * -1.0f;
			float yVec = fivef * cos(degToRad(heading));
			ENTITY::SET_ENTITY_HEADING(playerPed, heading);

			pos.x += xVec, pos.y += yVec;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
		}
		if (GetAsyncKeyState(0x41) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 266)) {
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(playerPed);

			ENTITY::SET_ENTITY_HEADING(playerPed, heading + 1.0f);
		}
		if (GetAsyncKeyState(0x44) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 271)) {
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(playerPed);

			ENTITY::SET_ENTITY_HEADING(playerPed, heading - 1.0f);
		}
		if (GetAsyncKeyState(VK_SHIFT) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 206)) {
			float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
			ENTITY::SET_ENTITY_HEADING(playerPed, heading);

			pos.z -= 0.1;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
		}
		if (GetAsyncKeyState(VK_SPACE) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 205)) {
			float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
			ENTITY::SET_ENTITY_HEADING(playerPed, heading);

			pos.z += 0.1;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
		}
	}
	else
	{
		NULL;
	}
	if (tinyplayer)
	{
		PED::SET_PED_CONFIG_FLAG(PLAYER::PLAYER_PED_ID(), 223, true);
	}
	else
	{
		PED::SET_PED_CONFIG_FLAG(PLAYER::PLAYER_PED_ID(), 223, false);
	}
	if (slowmode)
	{
		GAMEPLAY::SET_TIME_SCALE(0.2);
	}
	else
	{
		GAMEPLAY::SET_TIME_SCALE(1);
	}
	if (firebreath)
	{
		float XPos = 0.02, YPos = 0.2, ZPos = 0.0, XOff = 90.0, YOff = -100.0, ZOff = 90.0;

		STREAMING::REQUEST_NAMED_PTFX_ASSET("core");
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("core");
		if ((timeGetTime() - TimePD) > 200)
		{
			int ptfx = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2("ent_sht_flame", PLAYER::PLAYER_PED_ID(), XPos, YPos, ZPos,
				XOff, YOff, ZOff, SKEL_Head, 1, 1, 1, 1);
			TimePD = timeGetTime();
		}
		STREAMING::REMOVE_PTFX_ASSET();
	}
	if (superman)
	{
		if (GetAsyncKeyState(VK_SPACE))
		{
			ENTITY::APPLY_FORCE_TO_ENTITY(PLAYER::PLAYER_PED_ID(), 1, 0, 0, 10, 0, 0, 0, 1, true, true, true, true, true);
		}
		Hash hash = GAMEPLAY::GET_HASH_KEY("GADGET_PARACHUTE");
		WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), hash, 1, 1);

		if (ENTITY::IS_ENTITY_IN_AIR(PLAYER::PLAYER_PED_ID()) && !PED::IS_PED_RAGDOLL(PLAYER::PLAYER_PED_ID()))
		{
			if (GetAsyncKeyState(0x57)) // W key
			{
				ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 3, 0, 0);
			}

			if (GetAsyncKeyState(0x53)) // S key
			{
				ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 3, 6, 0);
			}
			if (GetAsyncKeyState(VK_SHIFT))
			{
				ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 6, 0, 0);
			}
		}
	}
	if (walkonwater)
	{
		Player player = PLAYER::PLAYER_ID();
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		DWORD model = ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID());
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
		float height = 0;
		WATER::_SET_CURRENT_INTENSITY(height);
		Object container = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, GAMEPLAY::GET_HASH_KEY("prop_container_ld2"), 0, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(container) && height > -50.0f)
		{
			Vector3 pRot = ENTITY::GET_ENTITY_ROTATION(playerPed, 0);
			RequestControlOfEnt(container);
			ENTITY::SET_ENTITY_COORDS(container, pos.x, pos.y, height - 1.5f, 0, 0, 0, 1);
			ENTITY::SET_ENTITY_ROTATION(container, 0, 0, pRot.z, 0, 1);
			Vector3 containerCoords = ENTITY::GET_ENTITY_COORDS(container, 1);
			if (pos.z < containerCoords.z)
			{
				if (!PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
				{
					ENTITY::SET_ENTITY_COORDS(playerPed, pos.x, pos.y, containerCoords.z + 2.0f, 0, 0, 0, 1);
				}
				else
				{
					RequestControlOfEnt(playerPed);
					ENTITY::SET_ENTITY_COORDS(pos.x,pos.y,pos.z, containerCoords.z + 2.0f, 0, 0, 0, 1);
				}
			}
		}
		else
		{
			Hash model = GAMEPLAY::GET_HASH_KEY("prop_container_ld2");
			STREAMING::REQUEST_MODEL(model);
			while (!STREAMING::HAS_MODEL_LOADED(model))WAIT(0);
			container = OBJECT::CREATE_OBJECT(model, pos.x, pos.y, pos.z, 1, 1, 0);
			RequestControlOfEnt(container);
			ENTITY::FREEZE_ENTITY_POSITION(container, 1);
			ENTITY::SET_ENTITY_ALPHA(container, 0, 1);
			ENTITY::SET_ENTITY_VISIBLE(container, false, 0);
		}
	}
	else
	{
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);
		Object container = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, GAMEPLAY::GET_HASH_KEY("prop_container_ld2"), 0, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(container))
		{
			RequestControlOfEnt(container);
			ENTITY::SET_ENTITY_COORDS(container, 0, 0, -1000.0f, 0, 0, 0, 1);
			WAIT(10);
			ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&container);
			ENTITY::DELETE_ENTITY(&container);
			WATER::_RESET_CURRENT_INTENSITY();
		}
	}
	if (nightvision)
	{
		GRAPHICS::SET_NIGHTVISION(true);
	}
	else
	{
		GRAPHICS::SET_NIGHTVISION(false);
	}
	if (thermalvision)
	{
		GRAPHICS::SET_SEETHROUGH(true);
	}
	else
	{
		GRAPHICS::SET_SEETHROUGH(false);
	}
	if (copingorn)
	{
		PLAYER::SET_POLICE_IGNORE_PLAYER(PLAYER::PLAYER_PED_ID(), true);
	}
	else
	{
		PLAYER::SET_POLICE_IGNORE_PLAYER(PLAYER::PLAYER_PED_ID(), false);
	}
	if (halfaph)
	{
		ENTITY::SET_ENTITY_ALPHA(PLAYER::PLAYER_PED_ID(), 128, false);
	}
	else
	{
		ENTITY::SET_ENTITY_ALPHA(PLAYER::PLAYER_PED_ID(), 255, false);
	}
	//-------武器-------//
	if (explosiveammo)
	{
		if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()) && PED::IS_PED_SHOOTING_IN_AREA)
		{
			Vector3 iCoord;
			if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), &iCoord))
			{
				FIRE::ADD_EXPLOSION(iCoord.x, iCoord.y, iCoord.z, 4, 100, true, false, 0);
			}
		}
		else
		{
			NULL;
		}
	}
	if (unlimitedammo)
	{
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_PED_ID(), true);
	}
	else
	{
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_PED_ID(), false);
	}
	if (teleportgun)
	{
		if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()) && PED::IS_PED_SHOOTING_IN_AREA)
		{
			Vector3 mCoord;
			if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), &mCoord))
			{
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), mCoord.x, mCoord.y, mCoord.z + 1, 0, 0, 1, 1);
			}
		}
		else
		{
			NULL;
		}
	}
	if (deletegun)
	{
		if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()) && PED::IS_PED_SHOOTING_IN_AREA)
		{
			Vector3 iCoords;
			if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), &iCoords))
			{
				GAMEPLAY::_CLEAR_AREA_OF_EVERYTHING(iCoords.x, iCoords.y, iCoords.z, 2, 0, 0, 0, 0);
			}
		}
		else
		{
			NULL;
		}
	}
	if (rapidfire)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		if (!PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 1))
		{
			PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 1);
			Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
			Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
			Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
			Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 1.0f)));
			Vector3 endCoords = addVector(startCoords, multiplyVector(gameplayCamDirection, 500.0f));
			Hash weaponhash;
			WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &weaponhash, 1);
			if (CONTROLS::IS_CONTROL_PRESSED(2, 208) || (GetKeyState(VK_LBUTTON) & 0x8000))
			{
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(startCoords.x, startCoords.y, startCoords.z, endCoords.x, endCoords.y, endCoords.z, 50, 1, weaponhash, playerPed, 1, 1, 0xbf800000);
			}
		}
	}
	else
	{
		NULL;
	}
	if (watershoot)
	{
		Ped PedID = PLAYER::PLAYER_PED_ID();
		Vector3 pos;
		WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PedID, &pos);
		Ped player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_PED_ID());
		FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z, 13, 5.f, true, false, 0.f);
	}
	if (fireshoot)
	{
		Ped PedID = PLAYER::PLAYER_PED_ID();
		Vector3 pos;
		WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PedID, &pos);
		Ped player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_PED_ID());
		FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z, ExplosionTypeFlame, 5.f, true, false, 0.f);
	}
	if (fireworkammo)
	{
		float startDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		float endDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		startDistance += 0.25;
		endDistance += 1000.0;
		if (PED::IS_PED_ON_FOOT(PLAYER::PLAYER_PED_ID()) && is_ped_shooting(PLAYER::PLAYER_PED_ID()))
		{
			Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREWORK"); //WEAPON_FIREWORK
			if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
			{
				WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			}
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);
		}
	}
	if (rainbowgun)
	{
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		static LPCSTR weaponNames[] = {
			"WEAPON_KNIFE", "WEAPON_NIGHTSTICK", "WEAPON_HAMMER", "WEAPON_BAT", "WEAPON_GOLFCLUB", "WEAPON_CROWBAR",
			"WEAPON_PISTOL", "WEAPON_COMBATPISTOL", "WEAPON_APPISTOL", "WEAPON_PISTOL50", "WEAPON_MICROSMG", "WEAPON_SMG",
			"WEAPON_ASSAULTSMG", "WEAPON_ASSAULTRIFLE", "WEAPON_CARBINERIFLE", "WEAPON_ADVANCEDRIFLE", "WEAPON_MG",
			"WEAPON_COMBATMG", "WEAPON_PUMPSHOTGUN", "WEAPON_SAWNOFFSHOTGUN", "WEAPON_ASSAULTSHOTGUN", "WEAPON_BULLPUPSHOTGUN",
			"WEAPON_STUNGUN", "WEAPON_SNIPERRIFLE", "WEAPON_HEAVYSNIPER", "WEAPON_GRENADELAUNCHER", "WEAPON_GRENADELAUNCHER_SMOKE",
			"WEAPON_RPG", "WEAPON_MINIGUN", "WEAPON_GRENADE", "WEAPON_STICKYBOMB", "WEAPON_SMOKEGRENADE", "WEAPON_BZGAS",
			"WEAPON_MOLOTOV", "WEAPON_FIREEXTINGUISHER", "WEAPON_PETROLCAN",
			"WEAPON_SNSPISTOL", "WEAPON_SPECIALCARBINE", "WEAPON_HEAVYPISTOL", "WEAPON_BULLPUPRIFLE", "WEAPON_HOMINGLAUNCHER",
			"WEAPON_PROXMINE", "WEAPON_SNOWBALL", "WEAPON_VINTAGEPISTOL", "WEAPON_DAGGER", "WEAPON_FIREWORK", "WEAPON_MUSKET",
			"WEAPON_MARKSMANRIFLE", "WEAPON_HEAVYSHOTGUN", "WEAPON_GUSENBERG", "WEAPON_HATCHET", "WEAPON_RAILGUN", "WEAPON_FLAREGUN",
			"WEAPON_KNUCKLE", "GADGET_NIGHTVISION", "GADGET_PARACHUTE", "WEAPON_MARKSMANPISTOL", "", ""
		};
		for (int i = 0; i < sizeof(weaponNames) / sizeof(weaponNames[0]); i++)
		{
			if (WEAPON::HAS_PED_GOT_WEAPON(playerPed, GAMEPLAY::GET_HASH_KEY((char*)weaponNames[i]), 0))
			{
				WEAPON::SET_PED_WEAPON_TINT_INDEX(playerPed, GAMEPLAY::GET_HASH_KEY((char*)weaponNames[i]), rand() % 8);
			}
		}
	}
	if (aimbot)
	{
		int player = PLAYER::PLAYER_ID();
		int playerPed = PLAYER::PLAYER_PED_ID();

		for (int i = 0; i < 32; i++)
		{
			if (i != player)
			{
				if (GetAsyncKeyState(VK_RBUTTON))
				{
					Ped targetPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					Vector3 targetPos = ENTITY::GET_ENTITY_COORDS(targetPed, 1);
					BOOL exists = ENTITY::DOES_ENTITY_EXIST(targetPed);
					BOOL dead = PLAYER::IS_PLAYER_DEAD(targetPed);

					if (exists && !dead)
					{
						float screenX, screenY;
						BOOL onScreen = GRAPHICS::GET_SCREEN_COORD_FROM_WORLD_COORD(targetPos.x, targetPos.y, targetPos.z, &screenX, &screenY);
						if (ENTITY::IS_ENTITY_VISIBLE(targetPed) && onScreen)
						{
							if (ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(playerPed, targetPed, 17))
							{
								Vector3 targetCoords = PED::GET_PED_BONE_COORDS(targetPed, 31086, 0, 0, 0);
								PED::SET_PED_SHOOTS_AT_COORD(playerPed, targetCoords.x, targetCoords.y, targetCoords.z, 1);
							}
						}
					}
				}
			}
		}
	}
	if (airstrikegun)
	{
		int playerPed = 0;
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), &coords))
		{
			Hash airStrike = $("WEAPON_AIRSTRIKE_ROCKET");
			WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
				WAIT(0);
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z + 30.f, coords.x, coords.y, coords.z, 250, 1, airStrike, playerPed, 1, 0, 0xbf800000);
		}
	}
	if (rocketgun)
	{
		float startDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		float endDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		startDistance += 0.25;
		endDistance += 1000.0;
		if (PED::IS_PED_ON_FOOT(PLAYER::PLAYER_PED_ID()) && is_ped_shooting(PLAYER::PLAYER_PED_ID()))
		{
			Hash rocket = 0xA284510B;
			if (!WEAPON::HAS_WEAPON_ASSET_LOADED(rocket))
			{
				WEAPON::REQUEST_WEAPON_ASSET(rocket, 31, false);
			}
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, rocket, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);
		}
	}
	if (RPGgun)
	{
		float startDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		float endDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		startDistance += 0.25;
		endDistance += 1000.0;
		if (PED::IS_PED_ON_FOOT(PLAYER::PLAYER_PED_ID()) && is_ped_shooting(PLAYER::PLAYER_PED_ID()))
		{
			Hash RPG = 1672152130;
			if (!WEAPON::HAS_WEAPON_ASSET_LOADED(RPG))
			{
				WEAPON::REQUEST_WEAPON_ASSET(RPG, 31, false);
			}
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, RPG, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);
		}
	}
	if (grvgun)
	{
		Entity EntityTarget;
		DWORD equippedWeapon;
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &equippedWeapon, 1);
		Player player = PLAYER::PLAYER_ID();
		Ped playerPed = PLAYER::PLAYER_PED_ID();

		Vector3 rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 dir = RotationToDirection(rot);
		Vector3 camPosition = CAM::GET_GAMEPLAY_CAM_COORD();
		Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		float spawnDistance = get_distance(&camPosition, &playerPosition);
		spawnDistance += 6;
		Vector3 spawnPosition = add(&camPosition, &multiply(&dir, spawnDistance));

		Player tempPed = PLAYER::PLAYER_ID();
		if (PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(PLAYER::PLAYER_ID(), &EntityTarget) && GetAsyncKeyState(VK_RBUTTON))
		{
			Vector3 EntityTargetPos = ENTITY::GET_ENTITY_COORDS(EntityTarget, 0);
			PLAYER::DISABLE_PLAYER_FIRING(tempPed, true);
			if (ENTITY::IS_ENTITY_A_PED(EntityTarget) && PED::IS_PED_IN_ANY_VEHICLE(EntityTarget, 1))
			{
				EntityTarget = PED::GET_VEHICLE_PED_IS_IN(EntityTarget, 0);
			}

			RequestControlOfEnt(EntityTarget);

			if (ENTITY::IS_ENTITY_A_VEHICLE(EntityTarget))
				ENTITY::SET_ENTITY_HEADING(
					EntityTarget, ENTITY::GET_ENTITY_HEADING(tempPed));

			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(EntityTarget, spawnPosition.x, spawnPosition.y, spawnPosition.z, 0, 0, 0);

			if (GetAsyncKeyState(VK_LBUTTON))
			{
				ENTITY::SET_ENTITY_HEADING(EntityTarget, ENTITY::GET_ENTITY_HEADING(tempPed));
				ENTITY::APPLY_FORCE_TO_ENTITY(EntityTarget, 1, dir.x * 10000.0f, dir.y * 10000.0f, dir.z * 10000.0f, 0.0f, 0.0f,0.0f, 0, 0, 1, 1, 0, 1);
				//PLAYER::DISABLE_PLAYER_FIRING(tempPed, false);
			}
		}
		if (!PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(PLAYER::PLAYER_ID(), &EntityTarget))
		{
			grvgun = true;
			//PLAYER::DISABLE_PLAYER_FIRING(tempPed, false);
		}
	}
	if (oneshoot)
	{
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 7.0f);
		PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 7.0f);
	}
	else
	{
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 1.0f);
		PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 1.0f);
	}
	if (deatheye)
	{
		GAMEPLAY::SET_TIME_SCALE(0.2);
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 7.0f);
		PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 7.0f);
	}
	if (kickgun)
	{
		Player ped_id = PLAYER::PLAYER_PED_ID();
		Player get_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped_id, &pos))
		{
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(ped_id, true);
			if (PED::IS_PED_SHOOTING_IN_AREA(ped_id, coords.x, coords.y, coords.z, coords.x, coords.y, coords.z, true, true))
			{
				if (PED::IS_PED_A_PLAYER(get_ped) && NETWORK::NETWORK_IS_PLAYER_CONNECTED(selectedPlayer))
				{
					kickplayer(selectedPlayer, 1);
				}
			}
		}
	}
	if (boxgun)
	{
		shootobj("prop_mb_sandblock_01");
	}
	if (barriergun)
	{
		shootobj("prop_mp_barrier_01");
	}
	if (barrier2gun)
	{
		shootobj("prop_mp_barrier_01b");
	}
	if (containergun)
	{
		shootobj("prop_container_01d");
	}
	if (containergun2)
	{
		shootobj("prop_container_03mb");
	}
	if (containergun3)
	{
		shootobj("prop_container_05a");
	}
	if (lampgun)
	{
		shootobj("prop_streetlight_04");
	}
	if (firegun)
	{
		Hash fire = 615608432;
		float startDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		float endDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		startDistance += 0.25;
		endDistance += 1000.0;
		if (PED::IS_PED_ON_FOOT(PLAYER::PLAYER_PED_ID()) && is_ped_shooting(PLAYER::PLAYER_PED_ID()))
		{
			if (!WEAPON::HAS_WEAPON_ASSET_LOADED(fire))
			{
				WEAPON::REQUEST_WEAPON_ASSET(fire, 31, false);
			}
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, fire, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);
		}
	}
	if (smokegun)
	{
		Hash smoke = -1600701090;
		float startDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		float endDistance = distanceBetween(CAM::GET_GAMEPLAY_CAM_COORD(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
		startDistance += 0.25;
		endDistance += 1000.0;
		if (PED::IS_PED_ON_FOOT(PLAYER::PLAYER_PED_ID()) && is_ped_shooting(PLAYER::PLAYER_PED_ID()))
		{
			if (!WEAPON::HAS_WEAPON_ASSET_LOADED(smoke))
			{
				WEAPON::REQUEST_WEAPON_ASSET(smoke, 31, false);
			}
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, smoke, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);
		}
	}
	if (friendlyshoot)
	{
		PED::SET_CAN_ATTACK_FRIENDLY(PLAYER::PLAYER_PED_ID(), true, false);
	}
	//-------载具-------//
	if (vehicleboost)
	{
		if (PLAYER::IS_PLAYER_PRESSING_HORN(PLAYER::PLAYER_ID()))
		{
			Vehicle Veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()), false);
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh);
			if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(Veh))
			{
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(Veh, 50);
			}
		}
	}
	if (vehiclegodmode)
	{
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		Vehicle vehicle = PED::GET_VEHICLE_PED_IS_USING(playerPed);
		ENTITY::SET_ENTITY_INVINCIBLE(vehicle, vehiclegodmode);
		ENTITY::SET_ENTITY_PROOFS(vehicle, vehiclegodmode, vehiclegodmode, vehiclegodmode, vehiclegodmode, vehiclegodmode, vehiclegodmode, vehiclegodmode, vehiclegodmode);
		VEHICLE::SET_VEHICLE_STRONG(vehicle, vehiclegodmode);
		VEHICLE::SET_VEHICLE_CAN_BREAK(vehicle, !vehiclegodmode);
		VEHICLE::SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle, !vehiclegodmode);
		VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(vehicle, !vehiclegodmode);
	}
	if (driveonwater)
	{
		Player player = PLAYER::PLAYER_ID();
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(playerPed, 0);
		DWORD model = ENTITY::GET_ENTITY_MODEL(veh);
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
		float height = 0;
		WATER::_SET_CURRENT_INTENSITY(height);
		if ((!(VEHICLE::IS_THIS_MODEL_A_PLANE(ENTITY::GET_ENTITY_MODEL(veh)))) && WATER::GET_WATER_HEIGHT_NO_WAVES(pos.x, pos.y, pos.z, &height))
		{
			Object container = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, GAMEPLAY::GET_HASH_KEY("prop_container_ld2"), 0, 0, 1);
			if (ENTITY::DOES_ENTITY_EXIST(container) && height > -50.0f)
			{
				Vector3 pRot = ENTITY::GET_ENTITY_ROTATION(playerPed, 0);
				RequestControlOfEnt(container);
				ENTITY::SET_ENTITY_COORDS(container, pos.x, pos.y, height - 1.5f, 0, 0, 0, 1);
				ENTITY::SET_ENTITY_ROTATION(container, 0, 0, pRot.z, 0, 1);
				Vector3 containerCoords = ENTITY::GET_ENTITY_COORDS(container, 1);
				if (pos.z < containerCoords.z)
				{
					if (!PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
					{
						ENTITY::SET_ENTITY_COORDS(playerPed, pos.x, pos.y, containerCoords.z + 2.0f, 0, 0, 0, 1);
					}
					else
					{
						RequestControlOfEnt(veh);
						Vector3 vehc = ENTITY::GET_ENTITY_COORDS(veh, 1);
						ENTITY::SET_ENTITY_COORDS(veh, vehc.x, vehc.y, containerCoords.z + 2.0f, 0, 0, 0, 1);
					}
				}
			}
			else
			{
				Hash model = GAMEPLAY::GET_HASH_KEY("prop_container_ld2");
				STREAMING::REQUEST_MODEL(model);
				while (!STREAMING::HAS_MODEL_LOADED(model))WAIT(0);
				container = OBJECT::CREATE_OBJECT(model, pos.x, pos.y, pos.z, 1, 1, 0);
				RequestControlOfEnt(container);
				ENTITY::FREEZE_ENTITY_POSITION(container, 1);
				ENTITY::SET_ENTITY_ALPHA(container, 0, 1);
				ENTITY::SET_ENTITY_VISIBLE(container, false, 0);
			}
		}
		else
		{
			Object container = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, GAMEPLAY::GET_HASH_KEY("prop_container_ld2"), 0, 0, 1);
			if (ENTITY::DOES_ENTITY_EXIST(container))
			{
				RequestControlOfEnt(container);
				ENTITY::SET_ENTITY_COORDS(container, 0, 0, -1000.0f, 0, 0, 0, 1);
				WAIT(10);
				ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&container);
				ENTITY::DELETE_ENTITY(&container);
				WATER::_RESET_CURRENT_INTENSITY();
			}
		}
	}
	else
	{
		NULL;
	}
	if (invisiblecar)
	{
		Vehicle Veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
		if (invisiblecar)
		{
			ENTITY::SET_ENTITY_VISIBLE(Veh, false, 0);
		}
		else
		{
			ENTITY::SET_ENTITY_VISIBLE(Veh, true, 0);
		}
	}
	if (rainbowcar)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 0, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 2, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 3, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 4, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 5, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 6, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 7, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
	}
	if (rainbowneno)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 0, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 2, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 3, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 4, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 5, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 6, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 7, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
	}
	if (rainbowsmoke)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
	}
	if (flycar)
	{
		int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		if (veh)
		{
			if (VEHICLE::IS_THIS_MODEL_A_CAR(ENTITY::GET_ENTITY_MODEL(veh)) || VEHICLE::IS_THIS_MODEL_A_BOAT(ENTITY::GET_ENTITY_MODEL(veh)))
			{
				if (CONTROLS::IS_DISABLED_CONTROL_PRESSED(2, INPUT_VEH_FLY_THROTTLE_UP))
				{
					float Speed = ENTITY::GET_ENTITY_SPEED(veh) + 0.4;
					VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, Speed);
				}

				if (CONTROLS::IS_DISABLED_CONTROL_PRESSED(2, INPUT_VEH_FLY_YAW_LEFT) && (!VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(veh)))
				{
					Vector3 Rot = ENTITY::GET_ENTITY_ROTATION(veh, 2);
					Rot.z = Rot.z + 1.0;
					ENTITY::SET_ENTITY_ROTATION(veh, Rot.x, Rot.y, Rot.z, 2, 1);
				}

				if (CONTROLS::IS_DISABLED_CONTROL_PRESSED(2, INPUT_VEH_FLY_YAW_RIGHT) && (!VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(veh)))
				{
					Vector3 Rot = ENTITY::GET_ENTITY_ROTATION(veh, 2);
					Rot.z = Rot.z - 1.0;
					ENTITY::SET_ENTITY_ROTATION(veh, Rot.x, Rot.y, Rot.z, 2, 1);
				}
			}
		}
	}
	if (enginealwayson)
	{
		VEHICLE::SET_VEHICLE_ENGINE_ON(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), true, true, false);
		VEHICLE::SET_VEHICLE_LIGHTS(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0);
		VEHICLE::_SET_VEHICLE_LIGHTS_MODE(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 2);
	}
	if (flycarv2)
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(veh, true);
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(veh, pos.x, pos.y, pos.z, false, false, false);
		if (GetAsyncKeyState(0x57) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 268)) {
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(veh);
			float xVec = fivef * sin((heading)) * -1.0f;
			float yVec = fivef * cos((heading));

			ENTITY::GET_ENTITY_HEADING(veh);
			pos.x -= xVec, pos.y -= yVec;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(veh, pos.x, pos.y, pos.z, false, false, false);
		}
		if (GetAsyncKeyState(0x53) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 269)) {
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(veh);
			float xVec = fivef * sin(degToRad(heading)) * -1.0f;
			float yVec = fivef * cos(degToRad(heading));
			ENTITY::SET_ENTITY_HEADING(veh, heading);

			pos.x += xVec, pos.y += yVec;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(veh, pos.x, pos.y, pos.z, false, false, false);
		}
		if (GetAsyncKeyState(0x41) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 266)) {
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(veh);

			ENTITY::SET_ENTITY_HEADING(veh, heading + 1.0f);
		}
		if (GetAsyncKeyState(0x44) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 271)) {
			float fivef = 0.5f;
			float heading = ENTITY::GET_ENTITY_HEADING(veh);

			ENTITY::SET_ENTITY_HEADING(veh, heading - 1.0f);
		}
		if (GetAsyncKeyState(VK_SHIFT) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 206)) {
			float heading = ENTITY::GET_ENTITY_HEADING(veh);
			ENTITY::SET_ENTITY_HEADING(veh, heading);

			pos.z -= 0.1;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(veh, pos.x, pos.y, pos.z, false, false, false);
		}
		if (GetAsyncKeyState(VK_SPACE) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 205)) {
			float heading = ENTITY::GET_ENTITY_HEADING(veh);
			ENTITY::SET_ENTITY_HEADING(veh, heading);

			pos.z += 0.1;
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(veh, pos.x, pos.y, pos.z, false, false, false);
		}
	}
	if (fixcarloop)
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());
		if (ENTITY::DOES_ENTITY_EXIST(veh))
		{
			VEHICLE::SET_VEHICLE_FIXED(veh);
			VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(veh);
			VEHICLE::SET_VEHICLE_DIRT_LEVEL(veh, 0);
			VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
		}
	}
	//-------线上-------//
	if (ESPname)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		for (int i = 0; i < 32; i++)
		{
			Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
			Vector3 playerCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
			char* Name = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

			if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
			{
				float x1;
				float y1;

				BOOL screenCoords = GRAPHICS::GET_SCREEN_COORD_FROM_WORLD_COORD(handleCoords.x, handleCoords.y, handleCoords.z, &x1, &y1);

				std::string playerName = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

				std::string nameSetupRed = "~HUD_COLOUR_RED~" + playerName;
				std::string nameSetupGreen = "~HUD_COLOUR_BLUE~" + playerName;

				char* playerInfoRed = new char[nameSetupRed.length() + 1];
				char* playerInfoGreen = new char[nameSetupGreen.length() + 1];

				std::strcpy(playerInfoRed, nameSetupRed.c_str());
				std::strcpy(playerInfoGreen, nameSetupGreen.c_str());

				UI::SET_TEXT_FONT(7);
				UI::SET_TEXT_SCALE(0.0, 0.40);
				UI::SET_TEXT_COLOUR(0, 255, 0, 255);
				UI::SET_TEXT_CENTRE(0);
				UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
				UI::SET_TEXT_EDGE(0, 0, 0, 0, 0);
				UI::BEGIN_TEXT_COMMAND_DISPLAY_TEXT((char*)"STRING");
				if (ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(playerPed, playerHandle, 17))
				{
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerInfoGreen);
				}
				else
				{
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerInfoRed);
				}
				UI::END_TEXT_COMMAND_DISPLAY_TEXT(x1, y1);
				UI::SET_TEXT_OUTLINE();
				UI::SET_TEXT_DROPSHADOW(5, 0, 78, 255, 255);
			}
		}
	}
	if (espbox)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		for (int i = 0; i < 32; i++)
		{
			Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
			char* Name = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

			if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
			{
				GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255); // top Box
				GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
				GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
				GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);

				GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, 80, 200, 80, 255); // bottom Box
				GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, 80, 200, 80, 255);
				GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, 80, 200, 80, 255);
				GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, 80, 200, 80, 255);

				GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255); // bottom Box
				GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
				GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
				GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
			}
		}
	}
	if (espline)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		for (int i = 0; i < 32; i++)
		{
			Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
			Vector3 locationOne = ENTITY::GET_ENTITY_COORDS(playerHandle, false);
			Vector3 locationTwo = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
			GRAPHICS::DRAW_LINE(locationOne.x, locationOne.y, locationOne.z, locationTwo.x, locationTwo.y, locationTwo.z, 255, 0, 0, 255);
		}
	}
	//-------玩家列表-------//
	if (freezeplayer)
	{
		AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
	}
	else
	{
		NULL;
	}
	if (spectate)
	{
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(true, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
	}
	else
	{
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(false, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
	}
	if (fireloop)
	{
		owned_explossion_bypass(true);
		Player selectPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		ExplosionPlayer(selectPlayer, 5, eExplosionType::ExplosionTypeFlame, 0, false, true);
		owned_explossion_bypass(false);
	}
	if (waterloop)
	{
		owned_explossion_bypass(true);
		Player selectPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		ExplosionPlayer(selectPlayer, 5, eExplosionType::ExplosionTypeWaterHydrant, 0, false, true);
		owned_explossion_bypass(false);
	}
	if (explosionloop)
	{
		owned_explossion_bypass(true);
		Player selectPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		ExplosionPlayer(selectPlayer, 65535, eExplosionType::ExplosionTypeGrenadeL, 2, false, true);
		owned_explossion_bypass(false);
	}
	if (FPSdrop)
	{
		model_spawn_bypass(true);
		model_check_bypass(true);
		Hash Scrap = -2130482718;
		Hash TowTruck = -1323100960;
		if (checkModel(Scrap)) {
			Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 0, 13);
			VEHICLE::CREATE_VEHICLE(Scrap, coords.x, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)), true, true);
		}
		if (checkModel(TowTruck)) {
			Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 0, 13);
			VEHICLE::CREATE_VEHICLE(TowTruck, coords.x, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)), true, true);
		}
		model_spawn_bypass(false);
		model_check_bypass(false);
	}
	if (selfespline)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
		Vector3 locationOne = ENTITY::GET_ENTITY_COORDS(playerHandle, false);
		Vector3 locationTwo = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		GRAPHICS::DRAW_LINE(locationOne.x, locationOne.y, locationOne.z, locationTwo.x, locationTwo.y, locationTwo.z, 255, 0, 0, 255);
	}
	if (selfespbox)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
		char* Name = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(selectedPlayer));
		if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
		{
			GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255); // top Box
			GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
			GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
			GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);

			GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, 80, 200, 80, 255); // bottom Box
			GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, 80, 200, 80, 255);
			GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, 80, 200, 80, 255);
			GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, 80, 200, 80, 255);

			GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255); // bottom Box
			GRAPHICS::DRAW_LINE(handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x + 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
			GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y - 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
			GRAPHICS::DRAW_LINE(handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z - 0.75, handleCoords.x - 0.5, handleCoords.y + 0.5, handleCoords.z + 0.75, 80, 200, 80, 255);
		}
	}
	if (selfespname)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
		Vector3 playerCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
		char* Name = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(selectedPlayer));
		if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
		{
			float x1;
			float y1;

			BOOL screenCoords = GRAPHICS::GET_SCREEN_COORD_FROM_WORLD_COORD(handleCoords.x, handleCoords.y, handleCoords.z, &x1, &y1);

			std::string playerName = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(selectedPlayer));

			std::string nameSetupRed = "~HUD_COLOUR_RED~" + playerName;
			std::string nameSetupGreen = "~HUD_COLOUR_BLUE~" + playerName;

			char* playerInfoRed = new char[nameSetupRed.length() + 1];
			char* playerInfoGreen = new char[nameSetupGreen.length() + 1];

			std::strcpy(playerInfoRed, nameSetupRed.c_str());
			std::strcpy(playerInfoGreen, nameSetupGreen.c_str());

			UI::SET_TEXT_FONT(7);
			UI::SET_TEXT_SCALE(0.0, 0.40);
			UI::SET_TEXT_COLOUR(0, 255, 0, 255);
			UI::SET_TEXT_CENTRE(0);
			UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
			UI::SET_TEXT_EDGE(0, 0, 0, 0, 0);
			UI::BEGIN_TEXT_COMMAND_DISPLAY_TEXT((char*)"STRING");
			if (ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(playerPed, playerHandle, 17))
			{
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerInfoGreen);
			}
			else
			{
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerInfoRed);
			}
			UI::END_TEXT_COMMAND_DISPLAY_TEXT(x1, y1);
			UI::SET_TEXT_OUTLINE();
			UI::SET_TEXT_DROPSHADOW(5, 0, 78, 255, 255);
		}
	}
	if (cargoplanespam)
	{
		Hash cargoplane = 0x15F27762;
		Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, false);
		float heading = ENTITY::GET_ENTITY_HEADING(get_player_ped);
		if (checkModel(cargoplane))
		{
			VEHICLE::CREATE_VEHICLE(cargoplane, pos.x, pos.y, pos.z, heading, true, false);
		}
	}
	if (cargobobspam)
	{
		Hash cargobob = 0xFCFCB68B;
		Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, false);
		float heading = ENTITY::GET_ENTITY_HEADING(get_player_ped);
		if (checkModel(cargobob))
		{
			VEHICLE::CREATE_VEHICLE(cargobob, pos.x, pos.y, pos.z, heading, true, false);
		}
	}
	if (stockadespam)
	{
		Hash stockade3 = 0xF337AB36;
		Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, false);
		float heading = ENTITY::GET_ENTITY_HEADING(get_player_ped);
		if (checkModel(stockade3))
		{
			VEHICLE::CREATE_VEHICLE(stockade3, pos.x, pos.y, pos.z, heading, true, false);
		}
	}
	if (franklinspam)
	{
		Hash franklin = 0x9B22DBAF;
		Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, false);
		float heading = ENTITY::GET_ENTITY_HEADING(get_player_ped);
		int type = PED::GET_PED_TYPE(franklin);
		if (checkModel(franklin))
		{
			PED::CREATE_PED(type,franklin, pos.x, pos.y, pos.z, heading, true, false);
		}
	}
	//-------世界-------//
	if (gravity)
	{
		GAMEPLAY::SET_GRAVITY_LEVEL(3);
	}
	else
	{
		NULL;
	}	
	if (explodnearcar)
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;

		Vehicle* vehs = new Vehicle[ArrSize];
		vehs[0] = ElementAmount;
		int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

		for (int i = 0; i < VehFound; i++)
		{
			int OffsetID = i * 2 + 2;
			if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
			{
				RequestControlOfEnt(vehs[OffsetID]);
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(vehs[OffsetID], false);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 0.f);
			}
		}
		delete vehs;
	}
	if (explodnearped)
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;
		Ped* peds = new Ped[ArrSize];
		peds[0] = ElementAmount;
		int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
		for (int i = 0; i < PedFound; i++)
		{
			int OffsetID = i * 2 + 2;
			//RequestControlOfEntity(peds[OffsetID]);
			if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
			{
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(peds[OffsetID], false);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z, 0, 1000.f, true, false, 0.f);
			}
		}
		delete peds;
	}
	if (boostnearcar)
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;
		Vehicle* vehs = new Vehicle[ArrSize];
		vehs[0] = ElementAmount;
		int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);
		for (int i = 0; i < VehFound; i++)
		{
			int OffsetID = i * 2 + 2;
			if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
			{
				//RequestControlOfEntity(vehs[OffsetID]);
				ENTITY::APPLY_FORCE_TO_ENTITY(vehs[OffsetID], 1, 0, 200, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1);
			}
		}
		delete vehs;
	}
	if (deletenearcar)
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;
		Vehicle* vehs = new Vehicle[ArrSize];
		vehs[0] = ElementAmount;
		int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);
		for (int i = 0; i < VehFound; i++)
		{
			int OffsetID = i * 2 + 2;
			if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
			{
				ENTITY::SET_ENTITY_COORDS(vehs[OffsetID], 6400.f, 6400.f, 0.f, false, false, false,false);
			}
		}
		delete vehs;
	}
	if (killpeds)
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;
		Ped* peds = new Ped[ArrSize];
		peds[0] = ElementAmount;
		int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
		for (int i = 0; i < PedFound; i++)
		{
			int OffsetID = i * 2 + 2;
			//RequestControlOfEntity(peds[OffsetID]);
			if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
			{
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(peds[OffsetID], false);
				PED::EXPLODE_PED_HEAD(peds[OffsetID], -879347409);
				ENTITY::SET_ENTITY_HEALTH(peds[OffsetID], 0);
			}
		}
		delete peds;
	}
	if (deleteNPC)
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;
		Ped* peds = new Ped[ArrSize];
		peds[0] = ElementAmount;
		int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
		for (int i = 0; i < PedFound; i++)
		{
			int OffsetID = i * 2 + 2;
			if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
			{
				ENTITY::SET_ENTITY_COORDS(peds[OffsetID], 6400.f, 6400.f, 0.f, false, false, false, false);
			}
		}
		delete peds;
	}
	//-------其他-------//
	if (hidehud)
	{
		UI::HIDE_HUD_AND_RADAR_THIS_FRAME();
	}
	if (enableradio)
	{
		AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(true);
	}
	if (displayfps)
	{
		float LastFrameTime = GAMEPLAY::GET_FRAME_TIME();
		int getFPS = (1.0f / LastFrameTime);
		char FPStext[60];
		snprintf(FPStext, sizeof(FPStext), "FPS: ~b~ %d", getFPS);
		setupdraw(true);
		UI::SET_TEXT_FONT(6);
		UI::SET_TEXT_SCALE(0.5f, 0.5f);
		UI::SET_TEXT_COLOUR(255, 255, 255, 255);
		UI::SET_TEXT_CENTRE(0);
		drawstring(FPStext, 0.020f, 0.010f);
	}
	if (disablephone)
	{
		CONTROLS::DISABLE_CONTROL_ACTION(27, ControlPhone, true);
	}
	if (displaycoord)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
		char out[32];
		sprintf(out, "X轴: %d Y轴: %d Z轴: %d", (int)coords.x, (int)coords.y, (int)coords.z);
		Menu::Drawing::Text(out, { 255, 255, 255, 255 }, { 0.1f, 0.02f }, { 0.36f, 0.36f }, true);
	}
	if (CN)
	{
		Menu::Drawing::Spriter("menu", "CN", 0.04f, 0.07f, 0.035f, 0.035f, 0, 255, 255, 255, 255);
	}
	if (aimcross)
	{
		Menu::cross();
	}
	if (SpeedoBool)
	{
		float speed = ENTITY::GET_ENTITY_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID())) * 3.6f;

		if (MPH)
			speed = speed * .621f;
		char msg[0xFF];
		if (MPH)
		{
			sprintf_s(msg, "%i", (int)speed);
		}
		else
		{
			sprintf_s(msg, "%i", (int)speed);
		}
		drawstring(msg, .50f, .05f);
		if (PlateMPH)
		{
			VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), msg);
		}
	}
	//-------保护-------//
	if (securitycam) {
		//创建相机
		cam = CAM::CREATE_CAM("DEFAULT_SCRIPTED_CAMERA", true);
		//将相机设置到海面上空
		CAM::SET_CAM_COORD(cam, -5000.f, -6000.f, 1500.f);
		CAM::SET_CAM_ROT(cam, 90, 0, 20, 0);
		//渲染相机
		CAM::RENDER_SCRIPT_CAMS(true, true, 10, false, false);
		//激活相机
		CAM::SET_CAM_ACTIVE(cam, true);
	}
	else
	{
		CAM::DESTROY_CAM(cam, 0);
		CAM::RENDER_SCRIPT_CAMS(false, false, 3000, true, false);
	}
	if (blockobjCrash)
	{
		BlockObjectCrash(true);
	}
	if (blockPedCrash)
	{
		BlockPedCrash(true);
	}
	if (blockvehCrash)
	{
		BlockVehicleCrash(true);
	}
	if (blockallentity)
	{
		BlockAllEntity(true);
	}
	if (antiattachment)
	{
		AntiAttachment(true);
	}
	if (anticage)
	{
		AntiCage(true);
	}
	if (anticargoplane)
	{
		AntiCargonplane(true);
	}
	if (anticeokick)
	{
		AntiCeoKick(true);
	}
	if (antiapartmenttp)
	{
		AntiApartmentTP(true);
	}
	if (antidrop)
	{
		AntiDrop(true);
	}
	if (antiexplosion)
	{
		AntiExplosion(true);
	}
	if (antifire)
	{
		AntiFire(true);
	}
	if (antifreeze)
	{
		AntiFreeze(true);
	}
	if (antigiveweapon)
	{
		AntiGiveWeapon(true);
	}
	if (antiinvite)
	{
		AntiInvite(true);
		NETWORK::NETWORK_BLOCK_INVITES(true);
	}
	if (antikick)
	{
		AntiKick(true);
	}
	if (antiPTFX)
	{
		AntiPTFX(true);
	}
	if (antiremotebounty)
	{
		AntiRemoteBounty(true);
	}
	if (antiremoteforcemission)
	{
		antiRemoteForceMission(true);
	}
	if (antiremotevehkick)
	{
		antiRemoteVehicleKick(true);
	}
	if (antiremoveweapon)
	{
		AntiRemoveWeapon(true);
	}
	if (antireport)
	{
		AntiReport(true);
	}
	if (antirequsetcontrol)
	{
		AntiRequestControl(true);
	}
	if (antisound)
	{
		AntiSound(true);
	}
	if (antiSPKick)
	{
		AntiSPKick(true);
	}
	if (antistar)
	{
		AntiStars(true);
	}
	if (antistat)
	{
		AntiStat(true);
	}
	if (antivotekick)
	{
		AntiVoteKick(true);
	}
	//-------热键-------//
	if (teleportwayhotkey)
	{
		IsKeyPressed(VK_F3) ? teleport_to_marker() : NULL;
	}
	if (tptoobjecthotkey)
	{
		IsKeyPressed(VK_F6) ? tp_to_objective() : NULL;
	}
	if (autoteleport)
	{
		if (UI::DOES_BLIP_EXIST)
		{
			teleport_to_marker();
		}
	}
	if (notifyvotekick)
	{
		if (NETWORK::_NETWORK_SESSION_IS_PLAYER_VOTED_TO_KICK(PLAYER::PLAYER_ID()))
		{
			IconNotification("~y~%s试图投票踢出您", "Decider", "Nofitication", PLAYER::GET_PLAYER_NAME(selectedPlayer));
		}
		for (int i = 0; i < 32; i++)
		{
			if (NETWORK::_NETWORK_SESSION_IS_PLAYER_VOTED_TO_KICK(i))
			{
				if (PLAYER::PLAYER_ID() != i)
				{
					IconNotification("您试图投票踢出%s", "Decider", "Nofitication", PLAYER::GET_PLAYER_NAME(i));
				}
			}
		}
	}
}
//Fetures end

void main() {
	notify((char*)"Welcome ~b~%s ~s~to ~y~XXX Menu", PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID()));
	while (true) {
		Menu::Checks::Controlls();
		Features();
		switch (Menu::Settings::currentMenu) {	

		case mainmenu:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("自我选项",self);
			Menu::MenuOption("武器选项", weapon);
			Menu::MenuOption("载具选项", vehicle);
			Menu::MenuOption("生成选项", spawn);
			Menu::MenuOption("战局选项", session);
			Menu::MenuOption("玩家列表", plist);
			Menu::MenuOption("保护选项", protection);
			Menu::MenuOption("传送选项", teleport);
			Menu::MenuOption("其他选项", misc);
			Menu::MenuOption("世界选项", world);
			Menu::MenuOption("恢复选项", recovery);
			Menu::MenuOption("设置选项", settings);
		}
		break;
#pragma region self
		case self:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("健康选项", health);
			Menu::MenuOption("通缉选项", wanted);
			Menu::MenuOption("运动选项", movement);
			Menu::MenuOption("情景选项", animation);
			Menu::MenuOption("视觉选项", vision);
			Menu::MenuOption("模型更改", modelchanger);
			Menu::MenuOption("娱乐选项", funny);
			Menu::MenuOption("杂项功能", other);
			Menu::Break("~italic~快捷");
			Menu::Toggle("无敌模式", godmode);
			Menu::Toggle("永不通缉", neverwanted);
			Menu::Toggle("无碰撞模式", noclip);
		}
		break;
		case health:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("无敌模式", godmode);
			Menu::Toggle("不会摔倒", noragdoll);
			if (Menu::Option("设置最大血量"))
			{
				ENTITY::SET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID(), 400);
			}
			if (Menu::Option("设置最大护甲"))
			{
				PED::ADD_ARMOUR_TO_PED(PLAYER::PLAYER_PED_ID(), 200);
			}
			if (Menu::Option("移除出血痕迹"))
			{
				PED::CLEAR_PED_BLOOD_DAMAGE(PLAYER::PLAYER_PED_ID());
			}
			if (Menu::Option("自杀"))
			{
				ENTITY::SET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID(), 0);
			}
		}
		break;
		case wanted:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("永不通缉", neverwanted);
			Menu::Toggle("警察无视", copingorn);
			if (Menu::Option("清除通缉"))
			{
				PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_PED_ID());
				PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID());
			}
			int level;
			if (Menu::Int("通缉等级", level, 0, 5))
			{
				PLAYER::SET_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID(), level, false);
				PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(PLAYER::PLAYER_ID(), false);
			}
			if (Menu::Option("给予5~ws~通缉"))
			{
				PLAYER::SET_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID(), 5, false);
				PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(PLAYER::PLAYER_ID(), false);
			}
			if (Menu::Option("虚假6~ws~通缉"))
			{
				GAMEPLAY::SET_FAKE_WANTED_LEVEL(6);
			}
			if (Menu::Option("取消6~ws~通缉"))
			{
				GAMEPLAY::SET_FAKE_WANTED_LEVEL(0);
			}
		}
		break;
		case movement:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("超级跳跃", superjump);
			Menu::Toggle("快速奔跑", superrun);
			Menu::Toggle("快速游泳", superswim);
			Menu::Toggle("慢动作模式", slowmode);
			Menu::Toggle("无碰撞模式", noclip);
			Menu::Toggle("水上漫步", walkonwater);
		}
		break;
		case funny:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("龙之吐息", firebreath);
			Menu::Toggle("超人模式", superman);
		}
		break;
		case other:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("缩小玩家", tinyplayer);
			Menu::Toggle("隐身", invisible);
			Menu::Toggle("半隐身", halfaph);
			if (Menu::Option("随机衣服"))
			{
				PED::SET_PED_RANDOM_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), true);
			}
			if (Menu::Option("克隆玩家"))
			{
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY; (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY, (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true));
				{
					ClonePlayer(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				}
			}
		}
		break;
		case animation:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("停止动作"))
			{
				ClearAnimation();
			}
			if (Menu::Option("舞蹈"))
			{
				Animation("mini@strip_club@private_dance@part1", "priv_dance_p1");
			}
			if (Menu::Option("Paparizzi")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_PAPARAZZI", 0, true);
			if (Menu::Option("Drug Dealer")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRUG_DEALER_HARD", 0, true);
			if (Menu::Option("Drinking Coffee")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_AA_COFFEE", 0, true);
			if (Menu::Option("Playing Instruments")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSICIAN", 0, true);
			if (Menu::Option("Flexing")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSCLE_FLEX", 0, true);
			if (Menu::Option("Jogging")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_JOG_STANDING", 0, true);
			if (Menu::Option("Binoculars")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_BINOCULARS", 0, true);
			if (Menu::Option("Clipboard")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CLIPBOARD", 0, true);
			if (Menu::Option("Bench Press")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_SEAT_MUSCLE_BENCH_PRESS", 0, true);
			if (Menu::Option("Chin Ups")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_MUSCLE_CHIN_UPS", 0, true);
			if (Menu::Option("BBQ")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_BBQ", 0, true);
			if (Menu::Option("Superhero")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SUPERHERO", 0, true);
			if (Menu::Option("Fishing")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_STAND_FISHING", 0, true);
			if (Menu::Option("Security")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SECURITY_SHINE_TORCH", 0, true);
			if (Menu::Option("Leaf Blower")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
			if (Menu::Option("Film Shocking")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MOBILE_FILM_SHOCKING", 0, true);
			if (Menu::Option("Idle Cop")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_COP_IDLES", 0, true);
			if (Menu::Option("Drinking")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRINKING", 0, true);
			if (Menu::Option("Golf Player")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GOLF_PLAYER", 0, true);
			if (Menu::Option("Welding")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_WELDING", 0, true);
			if (Menu::Option("Smoking Pot")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SMOKING_POT", 0, true);
			if (Menu::Option("Hammering")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_HAMMERING", 0, true);
			if (Menu::Option("Tennis")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_TENNIS_PLAYER", 0, true);
			if (Menu::Option("Drilling")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CONST_DRILL", 0, true);
		}
		break;
		case vision:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("移除视觉损害"))
			{
				PED::RESET_PED_VISIBLE_DAMAGE(PLAYER::PLAYER_PED_ID());
			}
			Menu::Toggle("夜视仪[线下]", nightvision);
			Menu::Toggle("热成像[线下]", thermalvision);
		}
		break;
		case modelchanger:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("线上", onlinemodel);
			Menu::MenuOption("动物", animalmodel);
			Menu::MenuOption("人物", pedmodel);
		}
		break;
		case animalmodel:
		{
			Menu::Titlesky("Decider");
			for (auto model : Ped_List_animal) {
				if (Menu::Option(model)) ChangeModel(model);
			}
		}
		break;
		case pedmodel:
		{
			Menu::Titlesky("Decider");
			for (auto model : pedModels) {
				if (Menu::Option(model)) ChangeModel(model);
			}
		}
		break;
		case onlinemodel:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("线上男角色"))
			{
				Hash h = 0x705E61F2;
				if (checkModel(h))
				{
					PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), h);
				}
			}
			if (Menu::Option("线上女角色"))
			{
				Hash h = 0x9C9EFFD8;
				if (checkModel(h))
				{
					PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), h);
				}
			}
		}
		break;
#pragma endregion
#pragma region weapon
		case weapon:
		{
			Menu::ammobanner();
			Menu::MenuOption("恶搞枪[Beta]", trollgun);
			Menu::MenuOption("道具枪", objgun);
			if (Menu::Option("给予所有武器"))
			{
				for (Hash hash : AllWeaponList)
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), hash, 9999, 0);
			}
			if (Menu::Option("给予所有MK2武器"))
			{
				std::vector<Hash> pistolMk2{
					1329061674, 2396306288, 1140676955, 1709866683, 568543123, 2467084625
				};
				std::vector<Hash> smgMk2{
					190476639, 2076495324, 2681951826, 3842157419, 1038927834, 1303784126, 2774849419, 966612367
				};
				std::vector<Hash> assltRifleMk2{
					1675665560, 2640679034, 2076495324, 1108334355, 77277509, 3328927042, 2805810788, 1303784126, 1447477866, 3115408816
				};
				std::vector<Hash> carbineRifleMk2{
					1141059345, 2640679034, 2076495324, 1108334355, 77277509, 3328927042, 2205435306, 1303784126, 2335983627, 3663056191
				};
				std::vector<Hash> combatMgMk2{
					1475288264, 2640679034, 1108334355, 1060929921, 3328927042, 1303784126, 3051509595, 3607349581
				};
				std::vector<Hash> heavySniperMk2{
					2313935527, 2193687427, 3159677559, 3061846192, 776198721, 2890063729, 1764221345, 277524638, 1815270123
				};
				std::vector<Hash> WeaponHash{
					0xBFE256D4, 0x78A97CD0, 0xDBBD7280, 0x394F415C, 0xFAD1F1C9, 0xA914799
				};
				for (Hash hash : pistolMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL_MK2"), hash);

				for (Hash hash : smgMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_SMG_MK2"), hash);

				for (Hash hash : assltRifleMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_ASSAULTRIFLE_MK2"), hash);

				for (Hash hash : carbineRifleMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_CARBINERIFLE_MK2"), hash);

				for (Hash hash : combatMgMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_COMBATMG_MK2"), hash);

				for (Hash hash : heavySniperMk2)
					WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_HEAVYSNIPER_MK2"), hash);

				for (Hash hash : WeaponHash)
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), hash, 9999, 0);
			}
			if (Menu::Option("移除所有武器"))
			{
				WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::PLAYER_PED_ID(), true);
			}
			if (Menu::Option("补满所有武器子弹"))
			{
				for (Hash hash : AllWeaponList)
				WEAPON::SET_PED_AMMO(PLAYER::PLAYER_PED_ID(), hash, 9999);
			}
			Menu::Toggle("爆炸子弹", explosiveammo);
			Menu::Toggle("快速射击", rapidfire);
			Menu::Toggle("无限弹药", unlimitedammo);
			Menu::Toggle("自瞄玩家", aimbot);
			Menu::Toggle("友好之火~o~[痛击我的友军]", friendlyshoot);
			Menu::Toggle("一击必杀", oneshoot);
			Menu::Toggle("死神之眼", deatheye);
			Menu::Toggle("燃烧瓶枪", firegun);
			Menu::Toggle("烟雾枪", smokegun);
			Menu::Toggle("重力枪", grvgun);
			Menu::Toggle("榴弹枪", rocketgun);
			Menu::Toggle("RPG枪", RPGgun);
			Menu::Toggle("传送枪", teleportgun);
			Menu::Toggle("删除枪", deletegun);
			Menu::Toggle("空袭枪", airstrikegun);
			Menu::Toggle("喷火枪", fireshoot);
			Menu::Toggle("喷水枪", watershoot);
			Menu::Toggle("烟花枪", fireworkammo);
			Menu::Toggle("彩虹枪", rainbowgun);
		}
		break;
		case trollgun:
		{
			Menu::ammobanner();
			Menu::Toggle("非主机踢枪", kickgun);
		}
		break;
		case objgun:
		{
			Menu::ammobanner();
			Menu::Toggle("箱子", boxgun);
			Menu::Toggle("路障[高]", barriergun);
			Menu::Toggle("路障[低]", barrier2gun);
			Menu::Toggle("集装箱[长]", containergun);
			Menu::Toggle("集装箱[中]", containergun2);
			Menu::Toggle("集装箱[短]", containergun3);
			Menu::Toggle("路灯", lampgun);
		}
		break;
#pragma endregion
#pragma region vehicle
		case vehicle:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("载具动作", flip);
			Menu::Toggle("无敌载具", vehiclegodmode);
			Menu::Toggle("水上驾驶", driveonwater);
			Menu::Toggle("喇叭加速", vehicleboost);
			Menu::Toggle("隐形载具", invisiblecar);
			Menu::Toggle("飞行载具", flycar);
			Menu::Toggle("飞行载具v2", flycarv2);
			Menu::Toggle("彩虹车辆", rainbowcar);
			Menu::Toggle("彩虹霓虹灯", rainbowneno);
			Menu::Toggle("彩虹轮胎烟", rainbowsmoke);
			Menu::Toggle("引擎一直开启", enginealwayson);
			Menu::Toggle("循环修车", fixcarloop);
			if (Menu::Option("自定义车牌"))
			{
				char* text;
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					text = CharKeyboard("Plate Changer", 21, text);
				}
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, text);
			}
			if (Menu::Option("修理载具"))
			{
				uint vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				VEHICLE::SET_VEHICLE_FIXED(vehicle);
				VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehicle);
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle, 0);
			}
			if (Menu::Option("清除灰尘"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(veh, 0);
			}
			if (Menu::Option("布满灰尘"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(veh, 15.0f);
			}
			if (Menu::Option("最大化升级"))
			{
				int vehid = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				MaxUpgrades(vehid);
			}
			if (Menu::Option("删除载具"))
			{
				int vehid = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				deletecar(vehid);
			}
			if (Menu::Option("开门"))
			{
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 1, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 2, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 3, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 4, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 5, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 6, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 7, true, false);

			}
			if (Menu::Option("关门"))
			{
				VEHICLE::SET_VEHICLE_DOORS_SHUT(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), true);
			}
			if (Menu::Option("锁门"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 2);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 3);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 4);
			}
			if (Menu::Option("开锁"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 1);
			}
			if (Menu::Option("随机涂料"))
			{
				int vehid = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehid, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehid, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
			}
		}
		break;
		case flip:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("向前翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 0, -2.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("双倍向前翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 12.0f, 0, -4.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("侧边翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 5.0f, 2.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("向后翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 0, 2.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("双倍向后翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 12.0f, 0, 4.0f, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("踢到翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 5.0f, 2.0f, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("跟翻滚")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 5.0f, -2.0f, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("本尼Hop")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 7.0f, 0, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("起飞！")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 40.0f, 0, 0, 0, true, true, true, true, false, true);
			}
			if (Menu::Option("降落！")) {
				int veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				RequestControlOfEnt(veh);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, -40.0f, 0, 0, 0, true, true, true, true, false, true);
			}
		}
		break;
#pragma endregion
#pragma region spawn
		case spawn:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("~b~生成设置", spanwsetting);
			Menu::MenuOption("~y~模组载具", moddedcar);
			Menu::MenuOption("车友会DLC", Tuner);
			Menu::MenuOption("名钻赌场DLC", CasinoHeistDLC);
			Menu::MenuOption("末日豪劫DLC", DoomsdayDLC);
			Menu::MenuOption("竞技场之战DLC", ArenaWarDLC);
			Menu::MenuOption("走私大暴走DLC", SmugglersDLC);
			Menu::MenuOption("军火霸业DLC", GunrunningDLC);
			Menu::MenuOption("南圣安地列斯超级系列赛DLC", SportSeries);
			Menu::MenuOption("超级跑车", super);
			Menu::MenuOption("跑车", Sports);
			Menu::MenuOption("经典跑车", SportsClassics);
			Menu::MenuOption("轿车", Sedans);
			Menu::MenuOption("SUV", suv);
			Menu::MenuOption("越野车", offroad);
			Menu::MenuOption("肌肉车", Muscle);
			Menu::MenuOption("军事用车", Military);
			Menu::MenuOption("自行车", bike);
			Menu::MenuOption("飞机", plane);
			Menu::MenuOption("直升机", helicopter);
			Menu::MenuOption("摩托车", motorbike);
			Menu::MenuOption("船只", boat);
			Menu::MenuOption("服务车辆", service);
			Menu::MenuOption("拖车", Trailer);
			Menu::MenuOption("火车", Trains);
			Menu::MenuOption("货车", Vans);
			Menu::MenuOption("公共事业", Utility);
			Menu::MenuOption("商业车辆", Commercial);
			Menu::MenuOption("小型车辆", Compacts);
			Menu::MenuOption("轿跑车", Coupes);
			Menu::MenuOption("警用车辆", Emergency);
			Menu::MenuOption("工业用车", Industrial);
		}
		break;
		case spanwsetting:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("生成满改载具", setcarmax);
			Menu::Toggle("生成无敌载具", setvehgodmode);
			Menu::Toggle("删除上一个载具", deletelastcar);
			Menu::Toggle("玩家坐在载具上", setpedintocar);
		}
		break;
		case moddedcar:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("6x6 RC匪徒"))
			{
				moddedVeh6x6Monster(PLAYER::PLAYER_ID(), true);
			}
			if (Menu::Option("大屌卡车"))
			{
				moddedvehBigOrangeDick(PLAYER::PLAYER_ID(), true);
			}
			if (Menu::Option("气瓶MK2"))
			{
				gasCylinderMK2(PLAYER::PLAYER_ID(), true);
			}
		}
		break;
		case Tuner:
		{
			Menu::Titlesky("Decider");
			for (auto car : tunersDLC)
			{
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Sports:
		{
			Menu::Titlesky("Decider");
			for (auto car : sports) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case SportsClassics:
		{
			Menu::Titlesky("Decider");
			for (auto car : sportsClassics) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Trailer:
		{
			Menu::Titlesky("Decider");
			for (auto car : trailer) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Trains:
		{
			Menu::Titlesky("Decider");
			for (auto car : trains) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Vans:
		{
			Menu::Titlesky("Decider");
			for (auto car : vans) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Utility:
		{
			Menu::Titlesky("Decider");
			for (auto car : utility) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Coupes:
		{
			Menu::Titlesky("Decider");
			for (auto car : coupes) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Emergency:
		{
			Menu::Titlesky("Decider");
			for (auto car : emergency) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Industrial:
		{
			Menu::Titlesky("Decider");
			for (auto car : industrial) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case CasinoHeistDLC:
		{
			Menu::Titlesky("Decider");
			for (auto car : casinoHeistDLC) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
			for (auto car1 : diamondDLC) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car1))) createveh(car1);
			}
		}
		break;
		case DoomsdayDLC:
		{
			Menu::Titlesky("Decider");
			for (auto car : doomsdayDLC) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case ArenaWarDLC:
		{
			Menu::Titlesky("Decider");
			for (auto car : arenaWarDLC) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case SmugglersDLC:
		{
			Menu::Titlesky("Decider");
			for (auto car : smugglersDLC) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case GunrunningDLC:
		{
			Menu::Titlesky("Decider");
			for (auto car : gunrunningDLC) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case SportSeries:
		{
			Menu::Titlesky("Decider");
			for (auto car : sportSeries) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Muscle:
		{
			Menu::Titlesky("Decider");
			for (auto car : muscle) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Military:
		{
			Menu::Titlesky("Decider");
			for (auto car : military) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case super:
		{
			Menu::Titlesky("Decider");
			for (auto car : Super) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case suv:
		{
			Menu::Titlesky("Decider");
			for (auto car : sUVs) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Sedans:
		{
			Menu::Titlesky("Decider");
			for (auto car : sedans) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case offroad:
		{
			Menu::Titlesky("Decider");
			for (auto car : offRoad) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case bike:
		{
			Menu::Titlesky("Decider");
			for (auto car : cycles) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case helicopter:
		{
			Menu::Titlesky("Decider");
			for (auto car : helicopters) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case plane:
		{
			Menu::Titlesky("Decider");
			for (auto car : planes) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case motorbike:
		{
			Menu::Titlesky("Decider");
			for (auto car : motorcycles) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case boat:
		{
			Menu::Titlesky("Decider");
			for (auto car : boats) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case service:
		{
			Menu::Titlesky("Decider");
			for (auto car : services) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Commercial:
		{
			Menu::Titlesky("Decider");
			for (auto car : commercial) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
		case Compacts:
		{
			Menu::Titlesky("Decider");
			for (auto car : compacts) {
				if (Menu::Option(UI::_GET_LABEL_TEXT(car))) createveh(car);
			}
		}
		break;
#pragma endregion
#pragma region teleport
		case teleport:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("传送到常用地点", commonteleport);
			Menu::MenuOption("传送到室内地点", Internaltp);
			if (Menu::Option("~p~传送到标记点[F3]"))
			{
				Vector3 coords = get_blip_marker();

				// get entity to teleport
				Entity e = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(e, 0))
				{
					e = PED::GET_VEHICLE_PED_IS_USING(e);
				}

				// load needed map region and check height levels for ground existence
				bool groundFound = false;
				static float groundCheckHeight[] =
				{ 100.0, 150.0, 50.0, 0.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0 };
				for (int i = 0; i < sizeof(groundCheckHeight) / sizeof(float); i++)
				{
					ENTITY::SET_ENTITY_COORDS_NO_OFFSET(e, coords.x, coords.y, groundCheckHeight[i], 0, 0, 1);
					WAIT(100);
					if (GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(coords.x, coords.y, groundCheckHeight[i], &coords.z, 0))
					{
						groundFound = true;
						coords.z += 3.0;
						break;
					}
				}
				// if ground not found then set Z in air and give player a parachute
				if (!groundFound)
				{
					coords.z = 1000.0;
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xFBAB5776, 1, 0);
				}
				//do it
				teleport_to_coords(e, coords);
			}
			if (Menu::Option("~y~传送到任务点[F6]"))
			{
				tp_to_objective();
			}
			Menu::Toggle("自动传送到标记点", autoteleport);
			if (Menu::Option("传送到个人载具[Beta]"))
			{
				if (globalHandle(2544210).At(298).As<int>() != -1)
				{
					globalHandle(2409299).At(8).As<int>() = 1;
				}
			}
			if (Menu::Option("向前传送"))
			{
				Vector3 Coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 3.0, 0.0);
				int player = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(player, 0))
					player = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				ENTITY::SET_ENTITY_COORDS_NO_OFFSET(player, Coords.x, Coords.y, Coords.z, 0, 0, 1);
			}
			if (Menu::Option("向上传送"))
			{
				Vector3 Coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 3.0);
				int player = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(player, 0))
					player = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				ENTITY::SET_ENTITY_COORDS_NO_OFFSET(player, Coords.x, Coords.y, Coords.z, 0, 0, 1);
			}
			if (Menu::Option("向后传送"))
			{
				Vector3 Coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, -3.0, 0.0);
				int player = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(player, 0))
					player = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				ENTITY::SET_ENTITY_COORDS_NO_OFFSET(player, Coords.x, Coords.y, Coords.z, 0, 0, 1);
			}
			if (Menu::Option("向下传送"))
			{
				Vector3 Coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -3.0);
				int player = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(player, 0))
					player = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				ENTITY::SET_ENTITY_COORDS_NO_OFFSET(player, Coords.x, Coords.y, Coords.z, 0, 0, 1);
			}
		}
		break;
		case Internaltp:
		{
			Vector3 pos;
			Menu::Titlesky("Decider");
			if (Menu::Option("FIB大楼楼顶"))
			{
				pos.x = 136.0f; pos.y = -750.f; pos.z = 262.f;
				ChangeCoords(pos);
			}
			if (Menu::Option("服装厂"))
			{
				pos.x = 712.716f; pos.y = -962.906f; pos.z = 30.6f;
				ChangeCoords(pos);
			}
			if (Menu::Option("富兰克林家"))
			{
				pos.x = 7.119f; pos.y = 536.615f; pos.z = 176.2f;
				ChangeCoords(pos);
			}
			if (Menu::Option("麦克家"))
			{
				pos.x = -813.603f; pos.y = 179.474f; pos.z = 72.5f;
				ChangeCoords(pos);
			}
			if (Menu::Option("崔佛家"))
			{
				pos.x = 1972.610f; pos.y = 3817.040f; pos.z = 33.65f;
				ChangeCoords(pos);
			}
			if (Menu::Option("丹尼斯阿姨家"))
			{
				pos.x = -14.380f; pos.y = -1438.510f; pos.z = 31.3f;
				ChangeCoords(pos);
			}
			if (Menu::Option("弗洛伊德家"))
			{
				pos.x = -1151.770f; pos.y = -1518.138f; pos.z = 10.85f;
				ChangeCoords(pos);
			}
			if (Menu::Option("莱斯特家"))
			{
				pos.x = 1273.898f; pos.y = -1719.304f; pos.z = 54.8f;
				ChangeCoords(pos);
			}
			if (Menu::Option("脱衣舞俱乐部"))
			{
				pos.x = 97.271f; pos.y = -1290.994f; pos.z = 29.45f;
				ChangeCoords(pos);
			}
			if (Menu::Option("银行金库（太平洋标准）"))
			{
				pos.x = 255.85f; pos.y = 217.f; pos.z = 101.9f;
				ChangeCoords(pos);
			}
			if (Menu::Option("喜剧俱乐部"))
			{
				pos.x = 378.100f; pos.y = -999.964f; pos.z = -98.6f;
				ChangeCoords(pos);
			}
			if (Menu::Option("人道实验室"))
			{
				pos.x = 3614.394f; pos.y = 3744.803f; pos.z = 28.9f;
				ChangeCoords(pos);
			}
			if (Menu::Option("人道实验室地道"))
			{
				pos.x = 3525.201f; pos.y = 3709.625f; pos.z = 21.2f;
				ChangeCoords(pos);
			}
			if (Menu::Option("IAA办公室"))
			{
				pos.x = 113.568f; pos.y = -619.001f; pos.z = 206.25f;
				ChangeCoords(pos);
			}
			if (Menu::Option("刑讯室"))
			{
				pos.x = 142.746f; pos.y = -2201.189f; pos.z = 4.9f;
				ChangeCoords(pos);
			}
			if (Menu::Option("军事基地高塔"))
			{
				pos.x = -2358.132f; pos.y = 3249.754f; pos.z = 101.65f;
				ChangeCoords(pos);
			}
			if (Menu::Option("矿井"))
			{
				pos.x = -595.342f; pos.y = 2086.008f; pos.z = 131.6f;
				ChangeCoords(pos);
			}
		}
		break;
		case commonteleport:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("千年山"))
			{
				Vector3 Coords;
				Coords.x = 489.979f; Coords.y = 5587.527f; Coords.z = 794.3f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("花园银行"))
			{
				Vector3 Coords;
				Coords.x = -74.94243f; Coords.y = -818.63446f; Coords.z = 326.174347f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("面具店"))
			{
				Vector3 Coords;
				Coords.x = -1338.16; Coords.y = -1278.11; Coords.z = 4.87;
				ChangeCoords(Coords);
			}
			if (Menu::Option("高级服装店"))
			{
				Vector3 Coords;
				Coords.x = -718.91; Coords.y = -158.16; Coords.z = 37.00;
				ChangeCoords(Coords);
			}
			if (Menu::Option("洛圣都改车王"))
			{
				Vector3 Coords;
				Coords.x = -365.425f; Coords.y = -131.809f; Coords.z = -225.f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("武器店"))
			{
				Vector3 Coords;
				Coords.x = 247.3652; Coords.y = -45.8777; Coords.z = 69.9411;
				ChangeCoords(Coords);
			}
			if (Menu::Option("洛圣都国际机场"))
			{
				Vector3 Coords;
				Coords.x = -1102.2910f; Coords.y = -2894.5160f; Coords.z = 13.9467f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("桑迪海岸机场"))
			{
				Vector3 Coords;
				Coords.x = 1747.f; Coords.y = 3273.f; Coords.z = -225.f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("雷通峡谷瀑布"))
			{
				Vector3 Coords;
				Coords.x = -597.9525f; Coords.y = 4475.2910f; Coords.z = 25.6890f;
				ChangeCoords(Coords);

			}
			if (Menu::Option("FIB大楼内部"))
			{
				Vector3 Coords;
				Coords.x = 135.5220f; Coords.y = -749.0003f; Coords.z = 260.0000f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("人道实验室"))
			{
				Vector3 Coords;
				Coords.x = 3617.231f; Coords.y = 3739.871f; Coords.z = 28.6901f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("桑库多堡垒"))
			{
				Vector3 Coords;
				Coords.x = -2356.0940; Coords.y = 3248.645; Coords.z = 101.4505;
				ChangeCoords(Coords);
			}
			if (Menu::Option("烂尾楼附近"))
			{
				Vector3 Coords;
				Coords.x = -222.1977; Coords.y = -1185.8500; Coords.z = 23.0294;
				ChangeCoords(Coords);
			}
			if (Menu::Option("沙漠机场"))
			{
				Vector3 Coords;
				Coords.x = 1741.4960f; Coords.y = 3269.2570f; Coords.z = 41.6014f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("IAA办公室"))
			{
				Vector3 Coords;
				Coords.x = 113.568f; Coords.y = -619.001f; Coords.z = 206.25f;
				ChangeCoords(Coords);
			}
			if (Menu::Option("脱衣舞俱乐部"))
			{
				Vector3 Coords;
				Coords.x = 97.271f; Coords.y = -1290.994f; Coords.z = 29.45f;
				ChangeCoords(Coords);
			}
		}
		break;
#pragma endregion
#pragma region misc
		case misc:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("隐藏HUD", hidehud);
			Menu::Toggle("随身电台", enableradio);
			Menu::Toggle("显示FPS", displayfps);
			Menu::Toggle("显示坐标", displaycoord);
			Menu::Toggle("禁用手机", disablephone);
			Menu::Toggle("十字准星", aimcross);
			Menu::Toggle("中国国旗", CN);
			Menu::Toggle("速度表", SpeedoBool);
			if (Menu::Option("跳过线上教程"))
			{
				if (NETWORK::NETWORK_IS_IN_TUTORIAL_SESSION())
				{
					NETWORK::NETWORK_END_TUTORIAL_SESSION();
				}
			}
			if (Menu::Option("闪光小地图"))
			{
				UI::FLASH_MINIMAP_DISPLAY();
			}
			if (Menu::Option("跳过过场动画~f~[地堡、摩托帮、办公室]")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_CUT_DONE"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_CUT_DONE_2"), -1, true);		
  		    }
			if (Menu::Option("天基炮无冷却")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ORBITAL_CANNON_COOLDOWN"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP1_ORBITAL_CANNON_COOLDOWN"), 0, 0);
			}
		}
		break;
#pragma endregion
#pragma region world
		case world:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("失重", gravity);
			Menu::Toggle("爆炸附近NPC", explodnearped);
			Menu::Toggle("杀死附近NPC", killpeds);
			Menu::Toggle("删除附近NPC", deleteNPC);
			Menu::Toggle("爆炸附近车辆", explodnearcar);
			Menu::Toggle("加速附近车辆", boostnearcar);
			Menu::Toggle("删除附近车辆", deletenearcar);
			if (Menu::Option("重置波浪强度"))
			{
				WATER::_RESET_CURRENT_INTENSITY;
			}
			if (Menu::Option("清空区域"))
			{
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 1);
				GAMEPLAY::CLEAR_AREA(coords.x, coords.y, coords.z, 200, true, false, false, false);
				GAMEPLAY::_CLEAR_AREA_OF_EVERYTHING(coords.x, coords.y, coords.z, 200, false, false, false, false);
			}
			Menu::Break("~italic~风编辑");
			float speed;
			if (Menu::Float("风速调整", speed, 0, 12))
			{
				GAMEPLAY::SET_WIND(speed);
				GAMEPLAY::SET_WIND_SPEED(speed);
			}
			float direction;
			if (Menu::Float("风向调整", direction, 0, 7))
			{
				GAMEPLAY::SET_WIND_DIRECTION(direction);
			}
			Menu::Break("~italic~本地天气");
			Menu::MenuOption("更改天气", weatherchange);
			if (Menu::Option("随机天气~f~[线下]"))
			{
				GAMEPLAY::SET_RANDOM_WEATHER_TYPE();
			}
			Menu::Break("~italic~本地时间");
			int sample_hour = TIME::GET_CLOCK_HOURS();
			int timeer; int minute; int second;
			if (Menu::Int("小时", timeer, 0, 24))
			{
				TIME::GET_CLOCK_HOURS();
				TIME::SET_CLOCK_TIME(timeer, minute, second);
			}
			if (Menu::Int("分钟", minute, 0, 60))
			{
				TIME::GET_CLOCK_MINUTES();
				TIME::SET_CLOCK_TIME(timeer, minute, second);
			}
			if (Menu::Int("秒", second, 0, 60))
			{
				TIME::GET_CLOCK_SECONDS();
				TIME::SET_CLOCK_TIME(timeer, minute, second);
			}
			if (Menu::Option("前进一小时"))
			{
				if (sample_hour + 1 == 24)NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, 1, 1);
				else NETWORK::NETWORK_OVERRIDE_CLOCK_TIME((sample_hour + 1), 0, 59);
			}
			if (Menu::Option("后退一小时"))
			{
				if (sample_hour - 1 == -1)NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(22, 59, 0);
				else NETWORK::NETWORK_OVERRIDE_CLOCK_TIME((sample_hour - 1), 0, 1);
			}
			if (Menu::Option("与系统时间同步"))
			{
				int year; int month; int day; int hour; int minute; int second;
				TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
				TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
				TIME::SET_CLOCK_TIME(hour, minute, second);
			}
			if (Menu::Option("重置覆盖的时间"))
			{
				NETWORK::NETWORK_CLEAR_CLOCK_TIME_OVERRIDE();
			}
		}
		break;
		case weatherchange:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("晴朗"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("CLEAR");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("CLEAR");
			}
			if (Menu::Option("阳光明媚"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("EXTRASUNNY");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("EXTRASUNNY");
			}
			if (Menu::Option("多云"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("CLOUDS");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("CLOUDS");
			}
			if (Menu::Option("阴天"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("OVERCAST");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("OVERCAST");
			}
			if (Menu::Option("雨天"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("RAIN");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("RAIN");
			}
			if (Menu::Option("太阳雨"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("CLEARING");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("CLEARING");
			}
			if (Menu::Option("雷阵雨"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("THUNDER");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("THUNDER");
			}
			if (Menu::Option("沙尘暴"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("Neutral");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Neutral");
			}
			if (Menu::Option("有雾的"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("SMOG");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("SMOG");
			}
			if (Menu::Option("大雾天"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("FOGGY");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("FOGGY");
			}
			if (Menu::Option("下雪"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("SNOWLIGHT");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("SNOWLIGHT");
			}
			if (Menu::Option("大雪"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("BLIZZARD");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("BLIZZARD");
			}
			if (Menu::Option("圣诞节"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("XMAS");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("XMAS");
			}
			if (Menu::Option("万圣节"))
			{
				GAMEPLAY::SET_WEATHER_TYPE_NOW("Halloween");
				GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Halloween");
			}
		}
		break;
#pragma endregion
#pragma region recovery
		case recovery:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("赌场编辑", dcheists);
			Menu::MenuOption("抢劫编辑", heistseditor);
			Menu::MenuOption("小岛编辑", cayoheist);
			Menu::MenuOption("末日抢劫", doomheist);
			Menu::MenuOption("角色属性", attributes);
			Menu::MenuOption("解锁选项", unlock);
			Menu::MenuOption("资产管理", assetmanager);
			Menu::MenuOption("CEO办公室", CEO);
			Menu::MenuOption("竞技场解锁", arenaWareditor);
			Menu::MenuOption("~y~等级选项", RP);
			if (Menu::Option("飞行驾校全部通关"))
			{
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_0"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_1"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_2"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_3"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_4"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_5"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_6"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_7"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_8"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_ASPASSEDLESSON_9"), true, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_0"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_1"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_2"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_3"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_4"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_5"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_6"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_7"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_8"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_PILOT_SCHOOL_MEDAL_9"), 1, true);
				notify("完成!");
			}
			if (Menu::Option("重置载具出售冷却"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_VEHICLE_SELL_TIME"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_NUM_CARS_SOLD_TODAY"), 0, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("清除精神状态")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 0);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_WAS_I_BAD_SPORT"), 0, 0);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 0);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), 0, 0);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 0);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_DESTROYED_PVEHICLES"), 0, 0);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_REPORT_STRENGTH"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_COMMEND_STRENGTH"), 100, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_FRIENDLY"), 100, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_HELPFUL"), 100, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GRIEFING"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_ANNOYINGME"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_HATE"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_TAGPLATE"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_UGC"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_NAME"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_MOTTO"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_STATUS"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_EMBLEM"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_EXPLOITS"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_ISPUNISHED"), 0, 1);
				notify((char*)"完成!");
			}
			if (Menu::Option("清除举报"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_REPORT_STRENGTH"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_COMMEND_STRENGTH"), 100, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_FRIENDLY"), 100, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_HELPFUL"), 100, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GRIEFING"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_ANNOYINGME"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_HATE"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_TAGPLATE"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_UGC"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_NAME"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_MOTTO"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_STATUS"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_BAD_CREW_EMBLEM"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_EXPLOITS"), 0, 1);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_ISPUNISHED"), 0, 1);
				notify((char*)"完成!");
			}
		}
		break;
		case RP:
		{
			Menu::Titlesky("Decider");
			if (Menu::Int("选择等级", RP_Value, 1, 8000))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(0, ControlFrontendAccept))
				{
					RP_Value = NumberKeyboard();
				}
			}
			if (Menu::Option("应用等级[~f~请先选择等级]"))
			{
				Set_RP(RP_Value);
			}
			Menu::Break("~italic~快捷");
			if (Menu::Option("等级设置为1级"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_SET_RP_GIFT_ADMIN"), 0, true);
				notify("完成!");
			}
			if (Menu::Option("等级设置为30级"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_SET_RP_GIFT_ADMIN"), 177100, true);
				notify("完成!");
			}
			if (Menu::Option("等级设置为90级"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_SET_RP_GIFT_ADMIN"), 1308100, true);
				notify("完成!");
			}
			if (Menu::Option("等级设置为120级"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_SET_RP_GIFT_ADMIN"), 2165850, true);
				notify("完成!");
			}
		}
		break;
		case arenaWareditor:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("解锁1000级老式机"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 999, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 10030, true);
				notify("完成!");
			}
			if (Menu::Option("解锁100级垃圾大王"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 1030, true);
				notify("完成!");
			}
			if (Menu::Option("解锁200级地霸王拖车"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 199, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 2030, true);
				notify("完成!");
			}
			if (Menu::Option("解锁25级出租车"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 24, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 280, true);
				notify("完成!");
			}
			if (Menu::Option("解锁300级混凝土搅拌车"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 299, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 3030, true);
				notify("完成!");
			}
			if (Menu::Option("解锁500级星际码头"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 499, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 5030, true);
				notify("完成!");
			}
			if (Menu::Option("解锁50级推土机"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 49, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 530, true);
				notify("完成!");
			}
			if (Menu::Option("解锁75级小丑花车"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP_TIER"), 74, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_AP"), 780, true);
				notify("完成!");
			}
			if (Menu::Option("解锁冲冲猴旅行家购买权限"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_SKILL_LEVEL"), 19, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ARENAWARS_SP"), 209, true);
				notify("完成!");
			}
		}
		break;
		case doomheist:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("重置末日1冷却时间"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_HEISTCOOLDOWNTIMER0"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置末日2冷却时间"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_HEISTCOOLDOWNTIMER1"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置末日3冷却时间"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_HEISTCOOLDOWNTIMER2"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁末日载具批发价"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_BITSET_MISS0"), 48326, true);
			}
			if (Menu::Option("解锁/重玩全部流程~f~[换战局,打电话给莱斯特取消末日任务3次]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_HEIST_STATUS"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_NOTIFICATIONS"), -1, true);
			}
			if (Menu::Option("跳过末日1前置任务~f~[重新开启策划大屏后生效]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_MISSION_PROG"), 503, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_HEIST_STATUS"), 229383, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_NOTIFICATIONS"), 1557, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("跳过末日2前置任务~f~[重新开启策划大屏后生效]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_MISSION_PROG"), 204, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_HEIST_STATUS"), 229378, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_NOTIFICATIONS"), 1557, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("跳过末日3前置任务~f~[重新开启策划大屏后生效]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_MISSION_PROG"), 16368, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_HEIST_STATUS"), 229380, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_NOTIFICATIONS"), 1557, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("跳过前置和准备任务~f~[重新开启策划大屏后生效]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_MISSION_PROG"), -1, true);
				notify((char*)"完成！");
			}
		}
		break;
		case cayoheist:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("解锁情报", cayoinfo);
			Menu::MenuOption("解锁干扰", cayoganrao);
			Menu::MenuOption("解锁次要目标", cayotarget);
			Menu::MenuOption("解锁主要目标", cayomaintarget);
			Menu::MenuOption("解锁武器套装", cayoweapon);
			if (Menu::Option("直接开启终章"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_MISSIONS"), -1, true);
			}
			if (Menu::Option("重置次要目标"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_CASH_I"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_CASH_C"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_CASH_I_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_CASH_C_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_CASH_V"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_WEED_I"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_WEED_C"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_WEED_I_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_WEED_C_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_WEED_V"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_COKE_I"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_COKE_C"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_COKE_I_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_COKE_C_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_COKE_V"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_GOLD_I"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_GOLD_C"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_GOLD_I_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_GOLD_C_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_GOLD_V"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_PAINT"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_PAINT_SCOPED"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4LOOT_PAINT_V"), 0, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置海岛面板"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4_MISSIONS"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4_PROGRESS"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4_PLAYTHROUGH_STATUS"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4CNF_APPROACH"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4CNF_BS_ENTR"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H4CNF_BS_GEN"), 0, true);
				notify((char*)"完成！");
			}
			Menu::Break("~italic~快捷");
			if (Menu::Option("小岛-单人/100%/困难/不拿保险柜/245W~f~[粉钻x1+画作x2]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_GEN"), 131071, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ENTR"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ABIL"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_APPROACH"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PROGRESS"), 131055, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_V"), 677045, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_MISSIONS"), 65535, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEP_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_ARM_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_HEL_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_GRAPPEL"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_UNIFORM"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BOLTCUT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TROJAN"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PLAYTHROUGH_STATUS"), 10, true);
				notify("完成!");
			}
			if (Menu::Option("小岛-双人/100%/困难/不拿保险柜/245W~f~[粉钻x1+画作x4]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_GEN"), 131071, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ENTR"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ABIL"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_APPROACH"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PROGRESS"), 131055, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_V"), 1034545, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_MISSIONS"), 65535, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEP_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_ARM_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_HEL_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_GRAPPEL"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_UNIFORM"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BOLTCUT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TROJAN"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PLAYTHROUGH_STATUS"), 10, true);
				notify("完成!");
			}
			if (Menu::Option("小岛-三人/100%/困难/不拿保险柜/245W~f~[粉钻x1+画作x6]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_GEN"), 131071, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ENTR"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ABIL"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_APPROACH"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PROGRESS"), 131055, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_V"), 1087424, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_MISSIONS"), 65535, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEP_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_ARM_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_HEL_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_GRAPPEL"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_UNIFORM"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BOLTCUT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TROJAN"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PLAYTHROUGH_STATUS"), 10, true);
				notify("完成!");
			}
			if (Menu::Option("小岛-四人/100%/困难/不拿保险柜/245W~f~[粉钻x1+画作x7]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_GEN"), 131071, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ENTR"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ABIL"), 63, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_APPROACH"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PROGRESS"), 131055, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_V"), 1213295, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_MISSIONS"), 65535, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEP_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_ARM_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_HEL_DISRP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_GRAPPEL"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_UNIFORM"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BOLTCUT"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TROJAN"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4_PLAYTHROUGH_STATUS"), 10, true);
				notify("完成!");
			}
		}
		break;
		case cayoinfo:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("解锁所有逃离点"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_APPROACH"), -1, true);
			}
			if (Menu::Option("解锁所有豪宅入口"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ENTR"), 63, true);
			}
			if (Menu::Option("解锁所有兴趣点"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_GEN"), -1, true);
			}
			if (Menu::Option("解锁团队支持"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BS_ABIL"), 63, true);
			}
		}
		break;
		case cayoganrao:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("武器"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEP_DISRP"), 3, true);
			}
			if (Menu::Option("防弹衣"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_ARM_DISRP"), 3, true);
			}
			if (Menu::Option("空中支援"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_HEL_DISRP"), 3, true);
			}
		}
		break;
		case cayotarget:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("现金"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_CASH_I_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_CASH_C_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_CASH_V_SCOPED"), -1, true);
			}
			if (Menu::Option("黄金"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_GOLD_I_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_GOLD_C_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_GOLD_V_SCOPED"), -1, true);
			}
			if (Menu::Option("大麻"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_WEED_I_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_WEED_C_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_WEED_V_SCOPED"), -1, true);
			}
			if (Menu::Option("可卡因"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_COKE_I_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_COKE_C_SCOPED"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_COKE_V_SCOPED"), -1, true);
			}
			if (Menu::Option("艺术品"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4LOOT_PAINT_SCOPED"), -1, true);
			}
		}
		break;
		case cayomaintarget:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("龙舌兰酒"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 0, true);
			}
			if (Menu::Option("红宝石项链"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 1, true);
			}
			if (Menu::Option("无名债券"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 2, true);
			}
			if (Menu::Option("粉红钻石"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 3, true);
			}
			if (Menu::Option("马德拉索文件"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 4, true);
			}
			if (Menu::Option("黑豹雕像"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_TARGET"), 5, true);
			}
		}
		break;
		case cayoweapon:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("侵略者套装"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 1, true);
			}
			if (Menu::Option("阴谋者套装"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 2, true);
			}
			if (Menu::Option("神枪手套装"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 3, true);
			}
			if (Menu::Option("破坏者套装"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 4, true);
			}
			if (Menu::Option("神射手套装"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_WEAPONS"), 5, true);
			}
			if (Menu::Option("获取抓钩"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_GRAPPEL"), -1, true);
			}
			if (Menu::Option("替换衣服"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_UNIFORM"), -1, true);
			}
			if (Menu::Option("螺丝切割"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_H4CNF_BOLTCUT"), -1, true);
			}
		}
		break;
		case heistseditor:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("跳过准备任务~f~[老抢劫,看动画时执行]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_HEIST_PLANNING_STAGE"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁全部公寓抢劫~f~[切换角色生效]"))
			{
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_COMPLET_HEIST_1STPER"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_COMPLET_HEIST_MEM"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_FLEECA_FIN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_PRISON_FIN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_HUMANE_FIN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_SERIESA_FIN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_PACIFIC_FIN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_HST_ORDER"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_HST_SAME_TEAM"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MPPLY_AWD_HST_ULT_CHAL"), true, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_HEIST_ACH_TRACKER"), -1, true);
				notify("完成!");
			}
			if (Menu::Option("取消抢劫任务"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CAS_HEIST_NOTS"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CAS_HEIST_FLOW"), -1, true);
				notify((char*)"完成！");
			}
		}
		break;
		case CEO:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("地板全是钱~f~[银行必须有2000W的存款]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LIFETIME_CONTRA_EARNINGS"), 20000000, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁小金人~f~[切换战局，进出货一次]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LIFETIME_CONTRA_EARNINGS"), 1000, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LIFETIME_BUY_COMPLETE"), 1000, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LIFETIME_SELL_UNDERTAKEN"), 1000, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LIFETIME_SELL_COMPLETE"), 1000, true);
				notify((char*)"完成！");
			}
		}
		break;
		case assetmanager:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("地堡补货~f~[换战局]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PAYRESUPPLYTIMER5"), 1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置地堡总营收"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LIFETIME_BKR_SELL_EARNINGS5"), 0, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("伪钞补货~f~[换战局]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PAYRESUPPLYTIMER2"), 1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("假证补货~f~[换战局]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PAYRESUPPLYTIMER0"), 1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("冰毒补货~f~[换战局]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PAYRESUPPLYTIMER3"), 1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("大麻补货~f~[换战局]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PAYRESUPPLYTIMER1"), 1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("可卡因补货~f~[换战局]"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PAYRESUPPLYTIMER4"), 1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("夜总会补满人气"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CLUB_POPULARITY"), 1000, true);
				notify((char*)"完成！");
			}
		}
		break;
		case unlock:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("解锁所有"))
			{
				UnlockAll();
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁所有游艇任务"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_YACHT_MISSION_PROG"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_YACHT_MISSION_FLOW"), 21845, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CASINO_DECORATION_GIFT_1"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁所有联系人"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PHN"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH2"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH3"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH4"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH5"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH6"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_VEH_TX1"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH7"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH8"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_ACT_PH9"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_CUT_DONE"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_FM_CUT_DONE_2"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁外星人纹身"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_TATTOO_FM_CURRENT_32"), 32768, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_TATTOO_FM_CURRENT_32"), 67108864, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁金属质感喷漆和铬合金轮毂"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_1_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_2_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_3_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_4_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_5_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_6_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_7_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_TURBO_STARTS_IN_RACE"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_USJS_COMPLETED"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FM_RACES_FASTEST_LAP"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_WIN_CAPTURES"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_DROPOFF_CAP_PACKAGES"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_KILL_CARRIER_CAPTURE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FINISH_HEISTS"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FINISH_HEIST_SETUP_JOB"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_NIGHTVISION_KILLS"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_WIN_LAST_TEAM_STANDINGS"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_ONLY_PLAYER_ALIVE_LTS"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMRALLYWONDRIVE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMRALLYWONNAV"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMWINSEARACE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMWINAIRRACE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_RACES_WON"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_RACES_WON"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_TOTAL_RACES_WON"), 50, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁限定载具节日涂装"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES0"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES1"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES2"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES3"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES4"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES5"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES6"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES7"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES8"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES9"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES10"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES11"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES12"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES13"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES14"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES15"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES16"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES17"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES18"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES19"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_XMASLIVERIES20"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁末日载具批发价"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GANGOPS_FLOW_BITSET_MISS0"), 48326, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解锁武器颜色"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MOLOTOV_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CMBTPISTOL_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PISTOL50_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_APPISTOL_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MICROSMG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SMG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ASLTSMG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ASLTRIFLE_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CRBNRIFLE_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ADVRIFLE_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CMBTMG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ASLTMG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_PUMP_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SAWNOFF_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_BULLPUP_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_ASLTSHTGN_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SNIPERRFL_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_HVYSNIPER_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GRNLAUNCH_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_RPG_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MINIGUNS_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_GRENADE_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SMKGRENADE_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_STKYBMB_ENEMY_KILLS"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MOLOTOV_ENEMY_KILLS"), 600, true);
			}
			if (Menu::Option("解锁载具颜色"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_1_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_2_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_3_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_4_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_5_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_6_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_CARMOD_7_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMRALLYWONDRIVE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMRALLYWONNAV"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMWINSEARACE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FMWINAIRRACE"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_TURBO_STARTS_IN_RACE"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_USJS_COMPLETED"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_RACES_WON"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_TOTAL_RACES_WON"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_AWD_FM_RACES_FASTEST_LAP"), 50, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 100, true);
			}
			if (Menu::Option("解锁摩托帮任务和外星蛋补给任务"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LFETIME_BIKER_BUY_COMPLET5"), 600, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_LFETIME_BIKER_BUY_UNDERTA5"), 600, true);
			}
			if (Menu::Option("解锁拉玛最后一个任务"))
			{
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_LOW_FLOW_CS_DRV_SEEN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_LOW_FLOW_CS_TRA_SEEN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_LOW_FLOW_CS_FUN_SEEN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_LOW_FLOW_CS_PHO_SEEN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_LOW_FLOW_CS_FIN_SEEN"), true, true);
				STATS::STAT_SET_BOOL(GAMEPLAY::GET_HASH_KEY("MP0_LOW_BEN_INTRO_CS_SEEN"), true, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_LOWRIDER_FLOW_COMPLETE"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPx_LOW_FLOW_CURRENT_PROG"), 8, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPx_LOW_FLOW_CURRENT_CALL"), 8, true);
				notify("完成!");
			}
		}
		break;
		case attributes:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("属性全满"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_STAM"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_SHO"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_STRN"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_STL"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_FLY"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_DRIV"), 100, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_SCRIPT_INCREASE_LUNG"), 100, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("隐藏属性全满"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_ABILITY_1_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_ABILITY_2_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_ABILITY_3_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_ABILITY_1_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_ABILITY_2_UNLCK"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CHAR_FM_ABILITY_3_UNLCK"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("护甲全满"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MP_CHAR_ARMOUR_1_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_MP_CHAR_ARMOUR_1_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MP_CHAR_ARMOUR_2_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_MP_CHAR_ARMOUR_2_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MP_CHAR_ARMOUR_3_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_MP_CHAR_ARMOUR_3_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MP_CHAR_ARMOUR_4_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_MP_CHAR_ARMOUR_4_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_MP_CHAR_ARMOUR_5_COUNT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_MP_CHAR_ARMOUR_5_COUNT"), 99, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("零食全满"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NO_BOUGHT_YUM_SNACKS"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NO_BOUGHT_HEALTH_SNACKS"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NO_BOUGHT_EPIC_SNACKS"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_OF_ORANGE_BOUGHT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_OF_BOURGE_BOUGHT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CIGARETTES_BOUGHT"), 99, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_NUMBER_OF_CHAMP_BOUGHT"), 99, true);
				notify((char*)"完成！");
			}
		}
		break;
		case casino_target:
		{
			Menu::heistbanner();
			if (Menu::Option("现金")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_TARGET"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_TARGET"), 0, true);
				notify((char*)"已更改为 现金");
			}
			if (Menu::Option("黄金")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_TARGET"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_TARGET"), 1, true);
				notify((char*)"已更改为 黄金");
			}
			if (Menu::Option("名画")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_TARGET"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_TARGET"), 2, true);
				notify((char*)"已更改为 名画");
			}
			if (Menu::Option("钻石")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_TARGET"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_TARGET"), 3, true);
				notify((char*)"已更改为 钻石");
			}
		}
		break;
		case casino_hacker:
		{
			Menu::heistbanner();
			if (Menu::Option("3%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWHACKER"), 1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("7%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWHACKER"), 2, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("5%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWHACKER"), 3, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("10%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWHACKER"), 4, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("9%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 5, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWHACKER"), 5, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("0%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 6, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWHACKER"), 6, true);
				notify((char*)"完成，请重进游戏厅！");
			}
		}
		break;
		case casino_driver:
		{
			Menu::heistbanner();
			if (Menu::Option("5%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWDRIVER"), 1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("7%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWDRIVER"), 2, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("9%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWDRIVER"), 3, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("6%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWDRIVER"), 4, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("10%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 5, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWDRIVER"), 5, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("0%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 6, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWDRIVER"), 6, true);
				notify((char*)"完成，请重进游戏厅！");
			}
		}
		break;
		case casino_gun:
		{
			Menu::heistbanner();
			if (Menu::Option("5%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWWEAP"), 1, true);
				notify((char*)"完成，请重进游戏厅!");
			}
			if (Menu::Option("9%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWWEAP"), 2, true);
				notify((char*)"完成，请重进游戏厅!");
			}
			if (Menu::Option("7%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWWEAP"), 3, true);
				notify((char*)"完成，请重进游戏厅");
			}
			if (Menu::Option("10%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 4, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWWEAP"), 4, true);
				notify((char*)"完成，请重进游戏厅!");
			}
			if (Menu::Option("8%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 5, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWWEAP"), 5, true);
				notify((char*)"完成，请重进游戏厅!");
			}
			if (Menu::Option("0%")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 6, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_CREWWEAP"), 6, true);
				notify((char*)"完成，请重进游戏厅!");
			}
		}
		break;
		case casino_scheme:
		{
			Menu::heistbanner();
			if (Menu::Option("隐迹潜踪")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_APPROACH"), 1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_APPROACH"), 1, true);
				notify((char*)"已更改为 隐迹潜踪");
			}
			if (Menu::Option("兵不厌诈")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_APPROACH"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_APPROACH"), 2, true);
				notify((char*)"已更改为 兵不厌诈");
			}
			if (Menu::Option("气势汹汹")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_APPROACH"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_APPROACH"), 3, true);
				notify((char*)"已更改为 气势汹汹");
			}
			break;
		}
		break;
		case dcheists:
		{
			Menu::heistbanner();
			Menu::MenuOption("赌场抢劫方式", casino_scheme);
			Menu::MenuOption("赌场抢劫目标", casino_target);
			Menu::MenuOption("赌场车手分红", casino_driver);
			Menu::MenuOption("赌场枪手分红", casino_gun);
			Menu::MenuOption("赌场黑客分红", casino_hacker);
			if (Menu::Option("解锁所有兴趣点")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_POI"), -1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("解锁所有侦查点")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_ACCESSPOINTS"), -1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("解锁隐藏黑客~f~[50个干扰器]")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CAS_HISIT_Flow"), -1, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置赌场冷却")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3_COMPLETEDPOSIX"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3_COMPLETEDPOSIX"), -1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("枪/车手黑客0分红[~f~拿完出金库后再执行]")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWWEAP"), 6, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWDRIVER"), 6, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_CREWHACKER"), 6, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("解决侦查拍照无法发送莱斯特"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_ACCESSPOINTS"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_POI"), 0, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置计划板1和2面板"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_BITSET1"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_BITSET0"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_POI"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_ACCESSPOINTS"), 0, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_CAS_HEIST_FLOW"), 0, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("跳过赌场计划板1")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_BITSET1"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_BITSET1"), -1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("跳过赌场计划板2[~r~谨慎使用~s~]")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_BITSET0"), -1, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_BITSET0"), -1, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("完成赌场杜根")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_DISRUPTSHIP"), 3, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP1_H3OPT_DISRUPTSHIP"), 3, true);
			}
			if (Menu::Option("获得赌场2级保安卡")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_KEYLEVELS"), 2, true);
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MP0_H3OPT_KEYLEVELS"), 2, true);
				notify((char*)"完成，请重进游戏厅！");
			}
			if (Menu::Option("解除老虎机限制"))
			{
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_CASINO_CHIPS_WON_GD"), 0, true);
				notify((char*)"完成！");
			}
			if (Menu::Option("重置赌场转盘")) {
				STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY((char*)"MPPLY_LUCKY_WHEEL_USAGE"), 0, true);
				notify((char*)"完成！");
			}
		}
		break;
#pragma endregion
#pragma region session
		case session:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("掉落选项", drop);
			Menu::MenuOption("支援选项", help);
			Menu::MenuOption("战局启动", sessionstarter);
			Menu::MenuOption("全局恶搞", sessiontroll);
			Menu::Toggle("全局名称透视", ESPname);
			Menu::Toggle("全局方框透视", espbox);
			Menu::Toggle("全局直线透视", espline);
			Menu::Toggle("通知投票踢", notifyvotekick);
			int kill; int death;
			if (Menu::Int("击杀数", kill, 0, 99999))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept))
				{
					kill = NumberKeyboard();
					STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), kill, 1);
				}
			}
			if (Menu::Int("死亡数", death, 0, 99999))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept))
				{
					death = NumberKeyboard();
					STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), death, 1);
				}
			}
			if (Menu::Option("离开线上模式"))
			{
				NETWORK::NETWORK_SESSION_LEAVE_SINGLE_PLAYER(PLAYER::PLAYER_PED_ID());
			}
			if (Menu::Option("生成不会动的傻逼"))
			{
				Entity Myped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID());
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(Myped, 1);
				coords.z += 1.5;

				int spawn = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(1, 8);
				switch (spawn)
				{
				case 1:
					coords.x += 2;
					break;
				case 2:
					coords.x += 2;
					coords.y += 2;
					break;
				case 3:
					coords.y += 2;
					break;
				case 4:
					coords.y += 2;
					coords.x -= 2;
					break;
				case 5:
					coords.x -= 2;
					break;
				case 6:
					coords.x -= 2;
					coords.y -= 2;
					break;
				case 7:
					coords.y -= 2;
					break;
				case 8:
					coords.x += 2;
					coords.y -= 2;
					break;
				}

				int group = PED::GET_PED_GROUP_INDEX(Myped);
				Ped ped = PED::CREATE_RANDOM_PED(coords.x, coords.y, coords.z);
			}
			if (Menu::Option("生成敌人"))
			{
				Hash enemy = 0x9B810FA2;
				STREAMING::REQUEST_MODEL(enemy);
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
				Ped ped = PED::CREATE_PED(2, enemy, pos.x, pos.y + 5.0f, pos.z + 1.0f, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), true, true);
				if (ped)
				{
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(ped, -2084633992, 9999, true);
					PED::SET_PED_CAN_SWITCH_WEAPON(ped, true);
					PED::SET_PED_AS_ENEMY(ped, true);
				}
			}
		}
		break;
		case drop:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("掉落降落伞"))
			{
				Vector3 vec = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_PARACHUTE"), vec.x, vec.y, vec.z, 0, 2500, 1, 0, 1);
			}
			if (Menu::Option("掉落防弹衣"))
			{
				Vector3 vec = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_ARMOUR_STANDARD"), vec.x, vec.y, vec.z, 0, 2500, 1, 0, 1);
			}
			if (Menu::Option("掉落医疗包"))
			{
				Vector3 vec = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_STANDARD"), vec.x, vec.y, vec.z, 0, 2500, 1, 0, 1);
			}
		}
		break;
		case help:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("空投牛鲨睾酮"))
			{
				callMerryweather(882);
			}
			if (Menu::Option("空投弹药"))
			{
				callMerryweather(874);
			}
			if (Menu::Option("空投无畏战士"))
			{
				callMerryweather(884);
			}
			if (Menu::Option("船只接送"))
			{
				callMerryweather(875);
			}
			if (Menu::Option("直升机接送"))
			{
				callMerryweather(876);
			}
			if (Menu::Option("支援直升机"))
			{
				callMerryweather(4453);
			}
			if (Menu::Option("空袭请求"))
			{
				callMerryweather(4454);
			}
		}
		break;
		case sessionstarter:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("加入公开战局"))
			{
				JoinSession(0);
			}
			if (Menu::Option("创建公开战局"))
			{
				JoinSession(1);
			}
			if (Menu::Option("加入帮会成员"))
			{
				JoinSession(12);
			}
			if (Menu::Option("加入帮会战局"))
			{
				JoinSession(3);
			}
			if (Menu::Option("加入私人帮会战局"))
			{
				JoinSession(2);
			}
			if (Menu::Option("加入好友战局"))
			{
				JoinSession(9);
			}
			if (Menu::Option("加入私人好友战局"))
			{
				JoinSession(6);
			}
			if (Menu::Option("非公开私人战局"))
			{
				JoinSession(10);
			}
			if (Menu::Option("仅限邀请战局"))
			{
				JoinSession(11);
			}
			if (Menu::Option("离开线上模式"))
			{
				JoinSession(-1);
			}
		}
		break;
		case sessiontroll:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("给予所有玩家武器"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (PLAYER::PLAYER_ID() != i)
					{
						Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (PED::IS_PED_A_PLAYER(playerped))
						{
							for (Hash hash : AllWeaponList)
								WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), hash, 9999, 0);
						}
					}
				}
			}
			if (Menu::Option("移除所有玩家武器"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (NETWORK::NETWORK_IS_PLAYER_CONNECTED(i))
					{
						if (PLAYER::PLAYER_ID() != i)
						{
							Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
							if (PED::IS_PED_A_PLAYER(playerped))
							{
								WEAPON::REMOVE_ALL_PED_WEAPONS(i, true);
							}
						}
					}
				}
			}
			if (Menu::Option("爆炸所有人"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (PLAYER::PLAYER_ID() != i)
					{
						Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (PED::IS_PED_A_PLAYER(playerped))
						{
							ExplosionPlayer(playerped, 50, 4, false, false, true);
						}
					}
				}
			}
			if (Menu::Option("踢出所有人"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (PLAYER::PLAYER_ID() != i)
					{
						Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (PED::IS_PED_A_PLAYER(playerped))
						{
							kickplayer(i, 1);
							kickplayer(i, 2);
							kickplayer(i, 3);
						}
					}
				}
			}
			if (Menu::Option("随机踢人"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (PLAYER::PLAYER_ID() != i)
					{
						if (PED::IS_PED_A_PLAYER(i))
						{
							kickplayer(selectedPlayer, 1);
						}
					}
				}
			}
			if (Menu::Option("把所有人关进笼子"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (PLAYER::PLAYER_ID() != i)
					{
						Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (PED::IS_PED_A_PLAYER(playerped))
						{
							model_spawn_bypass(true);
							AI::CLEAR_PED_TASKS_IMMEDIATELY(playerped);
							Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerped, true);
							Object obj = OBJECT::CREATE_OBJECT(0x392d62aa, pos.x, pos.y, pos.z - 1.f, true, false, false);
							ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
							model_spawn_bypass(false);
						}
					}
				}
			}
			if (Menu::Option("把所有人踢出车辆"))
			{
				for (int x = 0; x < 32; x++)
				{
					if (PLAYER::PLAYER_ID() != x)
					{
						Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(x);
						if (PED::IS_PED_A_PLAYER(playerped))
						{
							AI::CLEAR_PED_TASKS_IMMEDIATELY(playerped);
						}
					}
				}
			}
			if (Menu::Option("~r~Crash_All"))
			{
				ENTITY::SET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID(), 0);
				ChangeModel("a_c_boar");
				ChangeModel("a_c_chimp");
				ChangeModel("a_c_chop");
				ChangeModel("a_c_cow");
				ChangeModel("a_c_coyote");
				ChangeModel("a_c_killerwhale");
			}
		}
		break;
#pragma endregion
#pragma region playerlist
		case plist:
		{
			Menu::Titlesky("Decider");
			for (int i = 0; i < 32; i++)
			{
				if (NETWORK::NETWORK_IS_PLAYER_CONNECTED(i))
				{
					char* Playername = PLAYER::GET_PLAYER_NAME(i);
					char Buffer[255];
					if (NETWORK::NETWORK_GET_HOST_OF_SCRIPT("Freemode", -1, 0) == i)
					{
						sprintf(Buffer, "%s ~y~[主机]", Playername);
						Playername = Buffer;
						Menu::MenuOption(Playername, pmenu) ? selectedPlayer = i : NULL;
						//Menu::PlayerOption(i);
					}
					else if (PLAYER::PLAYER_ID() == i)
					{
						sprintf(Buffer, "%s ~b~[自己]", Playername);
						Playername = Buffer;
						Menu::MenuOption(Playername, pmenu) ? selectedPlayer = i : NULL;
					}
					else
					{
						Menu::MenuOption(Playername, pmenu) ? selectedPlayer = i : NULL;
					}
				}
			}
		}
		break;
		case pmenu:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("传送选项", tp);
			Menu::MenuOption("恶搞选项", troll);
			Menu::MenuOption("踢出选项", kicks);
			Menu::MenuOption("崩溃选项", crashes);
			Menu::MenuOption("实体轰炸", entityspam);
			Menu::MenuOption("生成选项", spawner);
			Menu::MenuOption("附件选项", attach);
			Menu::MenuOption("透视选项", Esp);
			Menu::MenuOption("载具选项", vehtroll);
			Menu::MenuOption("友好选项", peaceful);
			Menu::Break("~italic~其他");
			Menu::Toggle("观看玩家", spectate);
		}
		break;
		case tp:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("传送到玩家"))
			{
				TeleportToClient(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcberry2");
				GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY("scr_clown_appers", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
			}
			if (Menu::Option("传送到玩家车辆"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)), VEHICLE::IS_VEHICLE_SEAT_FREE(PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)), -1));
				}
			}
			if (Menu::Option("传送玩家车辆到我"))
			{
				Entity e = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Vector3 mpos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
				if (PED::IS_PED_IN_ANY_VEHICLE(e, false))
				{
					Vehicle ped = PED::GET_VEHICLE_PED_IS_USING(e);
					RequestControlOfEnt(e);
					int netID = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(e);
					NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netID, 1);
					request_control_id(netID);
					RequestControlOfEnt(ped);
					int netID1 = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(ped);
					NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netID1, 1);
					request_control_id(netID1);
					ENTITY::SET_ENTITY_COORDS_NO_OFFSET(ped, mpos.x, mpos.y, mpos.z, 0, 0, 1);
				}
				else
				{
					IconNotification("玩家不在车辆内", "Decider", "Menu");
				}
			}
		}
		break;
		case troll:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("笼子", cages);
			Menu::Toggle("冻结玩家", freezeplayer);
			Menu::Toggle("火循环", fireloop);
			Menu::Toggle("水循环", waterloop);
			Menu::Toggle("循环爆炸", explosionloop);
			Menu::Toggle("掉帧打击", FPSdrop);
			if (Menu::Option("克隆服装"))
			{
				stealOutfit();
			}
			if (Menu::Option("克隆玩家"))
			{
				int clone = PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 1, 1, 1);
				ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&clone);
			}
			if (Menu::Option("无声杀死"))
			{
				Vector3 Coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Hash explosionFx;
				owned_explossion_bypass(true);
				FIRE::ADD_EXPLOSION_WITH_USER_VFX(Coords.x, Coords.y, Coords.z, ExplosionTypeRocket, explosionFx, 100, true, false, false);
				owned_explossion_bypass(false);
			}
			if (Menu::Option("摇晃镜头"))
			{
				Vector3 Coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Hash explosionFx;
				owned_explossion_bypass(true);
				FIRE::ADD_EXPLOSION(Coords.x, Coords.y, Coords.z, CameraShakeHand, 50.f, false, true, 50.f);
				owned_explossion_bypass(false);
			}
			if (Menu::Option("电击玩家"))
			{
				Vector3 destination = PED::GET_PED_BONE_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_ROOT, 0.0f, 0.0f, 0.0f);
				Vector3 origin = PED::GET_PED_BONE_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_R_Hand, 0.0f, 0.0f, 0.2f);
				Hash tazerHash = GAMEPLAY::GET_HASH_KEY((char*)"WEAPON_STUNGUN");
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(origin.x, origin.y, origin.z, destination.x, destination.y, destination.z, 1, 0, tazerHash, PLAYER::PLAYER_PED_ID(), false, false, 1);
			}
			if (Menu::Option("陷害玩家"))
			{
				if (NETWORK::NETWORK_IS_IN_SESSION())
				{
					owned_explossion_bypass(true);
					Player local = PLAYER::PLAYER_ID();
					Ped ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
					for (int i = 0; i < 32; i++)
					{
						if (i != PLAYER::PLAYER_ID())
						{
							Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 0);
							FIRE::ADD_OWNED_EXPLOSION(ped, coords.x,coords.y,coords.z, 29, 9999.0f, false, true, 0.0f);
						}
					}
					owned_explossion_bypass(false);
				}
				else
				{
					notify("必须在线上使用");
				}
			}
			if (Menu::Option("踢出车辆"))
			{
				AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
			}
			if (Menu::Option("火车冲撞"))
			{
				Vehicle Impactlast = 0;
				Hash train = GAMEPLAY::GET_HASH_KEY("FREIGHT");
				if (checkModel(train)) {
					//Y偏移-10
					Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, -10, 0);
					//获取高度旋转
					float rot = ENTITY::GET_ENTITY_ROTATION(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0).z;
					if (Impactlast != 0) {
						//删除上一辆
						VEHICLE::DELETE_VEHICLE(&Impactlast);
					}
					coords.z -= 1;
					//创建载具
					Vehicle veh = VEHICLE::CREATE_VEHICLE(train, coords.x, coords.y, coords.z, rot, true, true);
					Impactlast = veh;
					VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
					//给予700的向前速度
					VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, 700.0);
				}
			}
			if (Menu::Option("发送到小岛"))
			{
				DWORD64 args[3] = { 0xa7d29605 ,selectedPlayer };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 3, 1 << selectedPlayer);
				DWORD64 arg[4] = { 1300962917 ,selectedPlayer };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, arg, 4, 1 << selectedPlayer);
			}
			if (Menu::Option("移除所有武器"))
			{
				WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 1);
			}
			if (Menu::Option("秃鹰直升机攻击"))
			{
				Hash weapHashList[4] = { 0x46B89C8E, 0x166218FF, 0xB1CA77B1, 0x42BF8A85 };
				int Pped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				int model = $("buzzard");
				STREAMING::REQUEST_MODEL($("buzzard"));
				while (!STREAMING::HAS_MODEL_LOADED($("buzzard"))) WAIT(0);
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Pped, GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-50, 50), GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-50, 50), GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(25, 75));
				int vehattackers = VEHICLE::CREATE_VEHICLE($("buzzard"), coords.x,coords.y,coords.z, ENTITY::GET_ENTITY_HEADING(Pped), 1, 0);
				STREAMING::REQUEST_MODEL($("s_m_y_blackops_01"));
				while (!STREAMING::HAS_MODEL_LOADED($("s_m_y_blackops_01"))) WAIT(0);
				Vector3 Pedcoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Pped, 6.0, 0.0, 0.0);
				for (int x = 0; x < 4; x++) {
					int attackerPed = PED::CREATE_PED(21, $("s_m_y_blackops_01"), Pedcoords.x, Pedcoords.y, Pedcoords.z, 1, 1, 0);
					if (attackerPed)
					{
						PED::SET_PED_INTO_VEHICLE(attackerPed, vehattackers, x - 1);
						AI::TASK_COMBAT_PED(attackerPed, Pped, 0, 0x10);
						WEAPON::GIVE_DELAYED_WEAPON_TO_PED(attackerPed, weapHashList[x], 9999, 1);
						PED::SET_PED_CAN_SWITCH_WEAPON(attackerPed, 1);
						PED::SET_PED_KEEP_TASK(attackerPed, true);
						PED::SET_PED_ALERTNESS(attackerPed, 3);
						if (x == 0) {
							VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, true);
							VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
							VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehattackers);
							AI::TASK_PLANE_CHASE(attackerPed, Pped, 0, 0, 50);
						}
					}
				}
			}
			if (Menu::Option("传送附近NPC到他"))
			{
				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Ped* peds = new Ped[ArrSize];
				peds[0] = ElementAmount;
				int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
				for (int i = 0; i < PedFound; i++)
				{
					int OffsetID = i * 2 + 2;
					if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
					{
						Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true);
						ENTITY::SET_ENTITY_COORDS(peds[OffsetID], pos.x, pos.y, pos.z, false, false, false, false);
					}
				}
				delete peds;
			}
			if (Menu::Option("传送附近载具到他"))
			{
				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Vehicle* vehs = new Vehicle[ArrSize];
				vehs[0] = ElementAmount;
				int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);
				for (int i = 0; i < VehFound; i++)
				{
					int OffsetID = i * 2 + 2;
					if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
					{
						Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true);
						ENTITY::SET_ENTITY_COORDS(vehs[OffsetID], pos.x, pos.y, pos.z, false, false, false, false);
					}
				}
				delete vehs;
			}
			if (Menu::Option("操他妈的~f~[集成恶搞]"))
			{
				Vector3 Coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Hash explosionFx = GAMEPLAY::GET_HASH_KEY("explosionFx");
				FIRE::ADD_EXPLOSION_WITH_USER_VFX(Coords.x, Coords.y, Coords.z, ExplosionTypeRocket, explosionFx, 100, true, false, false);
				WAIT(100);
				WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 1);
				WAIT(100);
				Vector3 destination = PED::GET_PED_BONE_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_ROOT, 0.0f, 0.0f, 0.0f);
				Vector3 origin = PED::GET_PED_BONE_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_R_Hand, 0.0f, 0.0f, 0.2f);
				Hash tazerHash = GAMEPLAY::GET_HASH_KEY((char*)"WEAPON_STUNGUN");
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(origin.x, origin.y, origin.z, destination.x, destination.y, destination.z, 1, 0, tazerHash, PLAYER::PLAYER_PED_ID(), false, false, 1);
				WAIT(100);
				if (NETWORK::NETWORK_IS_IN_SESSION())
				{
					owned_explossion_bypass(true);
					Player local = PLAYER::PLAYER_ID();
					Ped ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
					for (int i = 0; i < 32; i++)
					{
						if (i != PLAYER::PLAYER_ID())
						{
							Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 0);
							FIRE::ADD_OWNED_EXPLOSION(ped, coords.x, coords.y, coords.z, 29, 9999.0f, false, true, 0.0f);
						}
					}
					owned_explossion_bypass(false);
				}
				WAIT(100);
				model_spawn_bypass(true);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Object obj = OBJECT::CREATE_OBJECT(0x392d62aa, pos.x, pos.y, pos.z - 1.f, true, false, false);
				ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
				model_spawn_bypass(false);
			}
		}
		break;
		case cages:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("清除笼子"))
			{
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
				GAMEPLAY::CLEAR_AREA(pos.x, pos.y, pos.z, 10.0f, true, false, false, false);
				GAMEPLAY::_CLEAR_AREA_OF_EVERYTHING(pos.x, pos.y, pos.z, 10.0f, false, false, false, false);
				GAMEPLAY::CLEAR_AREA_OF_OBJECTS(pos.x, pos.y, pos.z, 10.0f, 2);
			}
			if (Menu::Option("铁栅栏"))
			{
				model_spawn_bypass(true);
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0));
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					WAIT(10);
				}
				AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				CREATE_OBJECT_WITH_ROTATION(206865238, coords.x - 1.39, coords.y - 1.87f, coords.z - 1.0f, 0.0f, 0.0f, -0.66576f, 0.746166f, false, true);
				CREATE_OBJECT_WITH_ROTATION(206865238, coords.x + 1.51f, coords.y + 1.94f, coords.z - 1.0f, 0.0f, 0.0f, 0.75172f, 0.659482f, false, true);
				model_spawn_bypass(false);
			}
			if (Menu::Option("气瓶笼子"))
			{
				model_spawn_bypass(true);
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0));
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					WAIT(10);
				}
				AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Hash cage2 = GAMEPLAY::GET_HASH_KEY("prop_gascage01");
				OBJECT::CREATE_OBJECT(cage2, coords.x, coords.y, coords.z, true, true, false);
				model_spawn_bypass(false);
			}
			if (Menu::Option("常规笼子"))
			{
				model_spawn_bypass(true);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Object obj = OBJECT::CREATE_OBJECT(0x392d62aa, pos.x, pos.y, pos.z - 1.f, true, false, false);
				ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
				model_spawn_bypass(false);
			}
		}
		break;
		case entityspam:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("货机轰炸~r~[谨慎使用]", cargoplanespam);
			Menu::Toggle("运兵直升机轰炸", cargobobspam);
			Menu::Toggle("运钞车轰炸", stockadespam);
			Menu::Toggle("富兰克林轰炸", franklinspam);
		}
		break;
		case spawner:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("敌人", spawnenemy);
			Menu::MenuOption("载具", spawnveh);
		}
		break;
		case spawnenemy:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("生成崔佛"))
			{
				Hash enemy = 0x9B810FA2;
				STREAMING::REQUEST_MODEL(enemy);
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true);
				Ped ped = PED::CREATE_PED(2, enemy, pos.x, pos.y + 5.0f, pos.z + 1.0f, ENTITY::GET_ENTITY_HEADING(get_player_ped), true, true);
				if (ped)
				{
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(ped, -2084633992, 9999, true);
					PED::SET_PED_CAN_SWITCH_WEAPON(ped, true);
					PED::SET_PED_AS_ENEMY(ped, true);
				}
			}
			if (Menu::Option("生成山狮"))
			{
				Hash Lion = 307287994;
				STREAMING::REQUEST_MODEL(Lion);
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true);
				Ped ped = PED::CREATE_PED(2, Lion, pos.x, pos.y + 5.0f, pos.z + 1.0f, ENTITY::GET_ENTITY_HEADING(get_player_ped), true, true);
				if (ped)
				{
					PED::SET_PED_AS_ENEMY(ped, true);
				}
			}
			if (Menu::Option("被猪拱屁屁"))
			{
				Hash pig = 0xB11BAB56;
				STREAMING::REQUEST_MODEL(pig);
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true);
				Ped ped = PED::CREATE_PED(2, pig, pos.x, pos.y + 5.0f, pos.z + 1.0f, ENTITY::GET_ENTITY_HEADING(get_player_ped), true, true);
				if (ped)
				{
					PED::SET_PED_AS_ENEMY(ped, true);
				}
			}
		}
		break;
		case spawnveh:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("生成T20"))
			{
				spawncartoplayer("T20");
			}
			if (Menu::Option("生成XA21"))
			{
				spawncartoplayer("XA21");
			}
			if (Menu::Option("生成天煞"))
			{
				spawncartoplayer("Lazer");
			}
			if (Menu::Option("生成暴君"))
			{
				spawncartoplayer("Oppressor");
			}
			if (Menu::Option("生成马克兔"))
			{
				spawncartoplayer("oppressor2");
			}
		}
		break;
		case vehtroll:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("加速120迈"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, 120.0f);
			}
			if (Menu::Option("锁门"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 2);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 3);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 4);
			}
			if (Menu::Option("开锁"))
			{
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 1);
			}
			if (Menu::Option("向前翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 0, -2.0f, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("双倍向前翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 12.0f, 0, -4.0f, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("向后翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 0, 2.0f, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("双倍向后翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 12.0f, 0, 4.0f, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("侧边翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 6.0f, 5.0f, 2.0f, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("踢到翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 5.0f, 2.0f, 0, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("跟翻滚"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 5.0f, -2.0f, 0, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("本尼Hop"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 7.0f, 0, 0, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("起飞！"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, 40.0f, 0, 0, 0, true, true, true, true, false, true);
				}
			}
			if (Menu::Option("降落！"))
			{
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true))
				{
					int veh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
					RequestControlOfEnt(veh);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, true, 0, 0, -40.0f, 0, 0, 0, true, true, true, true, false, true);
				}
			}
		}
		break;
		case peaceful:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("给予所有武器"))
			{
				for (Hash hash : AllWeaponList)
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), hash, 9999, 1);
			}
			if (Menu::Option("移除所有武器"))
			{
				WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 1);
			}
			if (Menu::Option("~f~半无敌[不防炸]"))
			{
				AttachObjects("prop_juicestand");
			}
			if (Menu::Option("掉落降落伞"))
			{
				Vector3 vec = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_PARACHUTE"), vec.x, vec.y, vec.z, 0, 2500, 1, 0, 1);
			}
			if (Menu::Option("掉落防弹衣"))
			{
				Vector3 vec = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_ARMOUR_STANDARD"), vec.x, vec.y, vec.z, 0, 2500, 1, 0, 1);
			}
			if (Menu::Option("掉落医疗包"))
			{
				Vector3 vec = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_STANDARD"), vec.x, vec.y, vec.z, 0, 2500, 1, 0, 1);
			}
			if (Menu::Option("~y~显示档案"))
			{
				int playerHandle;
				NETWORK::NETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);
				NETWORK::NETWORK_SHOW_PROFILE_UI(&playerHandle);
			}
		}
		break;
		case kicks:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("Non-Host Kick"))
			{
				IconNotification("\nStart Kicking", "Decider", "Kicks");
				kickplayer(selectedPlayer,1);
			}
			if (Menu::Option("Non-Host Kick V2"))
			{
				IconNotification("\nStart Kicking", "Decider", "Kicks");
				kickplayer(selectedPlayer, 2);
			}
			if (Menu::Option("Host Kick"))
			{
				if (NETWORK::NETWORK_IS_HOST_OF_THIS_SCRIPT() && PLAYER::PLAYER_ID())
				{
					NETWORK::NETWORK_SESSION_KICK_PLAYER(selectedPlayer);
				}
				else
				{
					IconNotification("\nYou ain't Host.Can't use host kick.\n\n","Decider","Kicks");
				}
			}
			if (Menu::Option("Super Kick"))
			{
				IconNotification("\nStart Kicking", "Decider", "Kicks");
				kickplayer(selectedPlayer, 1);
				kickplayer(selectedPlayer, 2);
				kickplayer(selectedPlayer, 4);
				kickplayer(selectedPlayer, 5);
				kickplayer(selectedPlayer, 6);
				kickplayer(selectedPlayer, 7);
				NETWORK::NETWORK_SESSION_KICK_PLAYER(selectedPlayer);
			}
		}
		break;
		case crashes:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("Crash V1"))
			{
				IconNotification("\nSending Model Crash...\n\n", "Decider", "Crashes");
				crashPlayerTimer = GetTickCount();
				crashPlayerEvent = true;
				if (crashPlayerEvent)
				{
					spectate = false, Spectate(false);
					Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedPlayer, true);

					for (int i = 0; i < blacklistedObjects.size(); i++) {
						Object tempObject = OBJECT::CREATE_OBJECT(blacklistedObjects[i], pos.x, pos.y, pos.z, true, false, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(tempObject, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine0, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
						CrashObject.push_back(tempObject);
					}
					IconNotification("\nCleaning Model Crash...\n\n", "Decider", "Crashes");
					if (GetTickCount() > 650 + crashPlayerTimer) {
						for (int i = 0; i < CrashObject.size(); i++) {
							ENTITY::DETACH_ENTITY(CrashObject.at(i), 1, 0);
							ENTITY::SET_ENTITY_COORDS(CrashObject.at(i), { 6400.f }, 0, 0, 0, 0, 0, 0);
							ENTITY::SET_ENTITY_AS_MISSION_ENTITY(CrashObject.at(i), 1, 1);
							ENTITY::DELETE_ENTITY(&CrashObject.at(i));
						}
						CrashObject.clear();
						crashPlayerEvent = false;
					}
				}
				IconNotification("\nFinish!\n\n", "Decider", "Crashes");
			}
			if (Menu::Option("Crash V2"))
			{
				IconNotification("\nSending Clone Crash...\n\n", "Decider", "Crashes");
				const int maxped = 150;
				Ped ClonePed[maxped];
				Ped playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Vector3 selectedPedPosition = ENTITY::GET_ENTITY_COORDS(playerped, false);
				Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(playerped, false);

				if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z, selectedPedPosition.x, selectedPedPosition.y, selectedPedPosition.z, false) > 350.0f)
				{
					if (PED::IS_PED_IN_ANY_VEHICLE(PED::GET_VEHICLE_PED_IS_IN(playerped, 1), false))
					{
						AI::CLEAR_PED_TASKS_IMMEDIATELY(playerped);
						AI::CLEAR_PED_SECONDARY_TASK(playerped);
					}
				}
				for (int i = 0; i < maxped; i++)
				{
					ClonePed[i] = PED::CLONE_PED(playerped, ENTITY::GET_ENTITY_HEADING(playerped), true, true);
					WAIT(0);
					RequestingControl(ClonePed[i]);
					WAIT(0);
					ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonePed[i], playerped, PED::GET_PED_BONE_INDEX(playerped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(playerped);
					WAIT(5);
				}
				IconNotification("\nCleaning Peds...\n\n", "Decider", "Crashes");
				for (int i = 0; i < maxped; i++)
				{
					WAIT(10);
					RequestingControl(ClonePed[i]);
					ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ClonePed[i]);
					PED::DELETE_PED(&ClonePed[i]);
				}
				IconNotification("\nFinish!\n\n", "Decider", "Crashes");
			}
			if (Menu::Option("Crash V3"))
			{
				IconNotification("\nSending Ped Crash...\n\n", "Decider", "Crashes");
				const int max = 90;
				Ped ped[max]; 
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer); 
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true); 
				float heading = ENTITY::GET_ENTITY_HEADING(get_player_ped);
				if (PED::IS_PED_IN_ANY_VEHICLE(get_player_ped, false))
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(get_player_ped);
				}
				for (int i = 0; i < max; i++) 
				{
					Hash Wade = 0x92991B72;
					STREAMING::REQUEST_MODEL(Wade);
					int type = PED::GET_PED_TYPE(Wade);
					ped[i] = PED::CREATE_PED(type, Wade, pos.x, pos.y, pos.z, heading, true, true);
					WAIT(0);
					RequestingControl(ped[i]);
					WAIT(0);
					ENTITY::SET_ENTITY_VISIBLE(ped[i], false, 0);
					ENTITY::ATTACH_ENTITY_TO_ENTITY(ped[i], get_player_ped, SKEL_Spine0, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, true, 2, true);//附加到目标 SKEL_Spine0 = 脊柱
					WAIT(5);
				}
				IconNotification("\nCleaning Peds...\n\n", "Decider", "Crashes");
				for (int i = 0; i < max; i++)
				{
					WAIT(100);
					RequestingControl(ped[i]);
					ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ped[i]);
					PED::DELETE_PED(&ped[i]);
				}
				IconNotification("\nFinish!\n\n", "Decider", "Crashes");
			}
			if (Menu::Option("AIO Crash"))
			{
				IconNotification("\nSending Crashes\n\n", "Decider", "Crashes");
				crashPlayerTimer = GetTickCount();//Model Crash
				crashPlayerEvent = true;
				if (crashPlayerEvent)
				{
					spectate = false, Spectate(false);
					Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedPlayer, true);

					for (int i = 0; i < blacklistedObjects.size(); i++) {
						Object tempObject = OBJECT::CREATE_OBJECT(blacklistedObjects[i], pos.x, pos.y, pos.z, true, false, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(tempObject, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine0, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
						CrashObject.push_back(tempObject);
					}

					if (GetTickCount() > 650 + crashPlayerTimer) {
						for (int i = 0; i < CrashObject.size(); i++) {
							ENTITY::DETACH_ENTITY(CrashObject.at(i), 1, 0);
							ENTITY::SET_ENTITY_COORDS(CrashObject.at(i), { 6400.f }, 0, 0, 0, 0, 0, 0);
							ENTITY::SET_ENTITY_AS_MISSION_ENTITY(CrashObject.at(i), 1, 1);
							//ENTITY::DELETE_ENTITY(&CrashObject.at(i));
						}
						CrashObject.clear();
						crashPlayerEvent = false;
					}
				}
				WAIT(1000);

				const int maxped = 150;//Clone Crash
				Ped ClonePed[maxped];
				Ped playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Vector3 selectedPedPosition = ENTITY::GET_ENTITY_COORDS(playerped, false);
				Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(playerped, false);

				if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z, selectedPedPosition.x, selectedPedPosition.y, selectedPedPosition.z, false) > 350.0f)
				{
					if (PED::IS_PED_IN_ANY_VEHICLE(PED::GET_VEHICLE_PED_IS_IN(playerped, 1), false))
					{
						AI::CLEAR_PED_TASKS_IMMEDIATELY(playerped);
						AI::CLEAR_PED_SECONDARY_TASK(playerped);
					}
				}
				for (int i = 0; i < maxped; i++)
				{
					ClonePed[i] = PED::CLONE_PED(playerped, ENTITY::GET_ENTITY_HEADING(playerped), true, true);
					WAIT(0);
					RequestingControl(ClonePed[i]);
					WAIT(0);
					ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonePed[i], playerped, PED::GET_PED_BONE_INDEX(playerped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(playerped);
					WAIT(5);
				}
				for (int i = 0; i < maxped; i++)
				{
					WAIT(10);
					RequestingControl(ClonePed[i]);
					ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ClonePed[i]);
					PED::DELETE_PED(&ClonePed[i]);
				}
				WAIT(2000);
				//NPC Attach Crash
				const int max = 90;
				Ped ped[max]; 
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer); 
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(get_player_ped, true);
				float heading = ENTITY::GET_ENTITY_HEADING(get_player_ped);
				if (PED::IS_PED_IN_ANY_VEHICLE(get_player_ped, false))
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(get_player_ped);
				}
				for (int i = 0; i < max; i++) 
				{
					Hash Franklin = 0x92991B72; 
					STREAMING::REQUEST_MODEL(Franklin);
					int type = PED::GET_PED_TYPE(Franklin);
					ped[i] = PED::CREATE_PED(type, Franklin, pos.x, pos.y, pos.z, heading, true, true);
					WAIT(0);
					RequestingControl(ped[i]);
					WAIT(0);
					ENTITY::ATTACH_ENTITY_TO_ENTITY(ped[i], get_player_ped, SKEL_Spine0, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, true, 2, true);
					WAIT(5);
				}
				for (int i = 0; i < max; i++)
				{
					WAIT(100);
					RequestingControl(ped[i]);
					ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ped[i]);
					PED::DELETE_PED(&ped[i]);
				}
				const int max1 = 100;
				Vehicle veh[max1];
				if (PED::IS_PED_IN_ANY_VEHICLE(get_player_ped, false))
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(get_player_ped);
				}
				for (int i = 0; i < max1; i++)
				{
					Hash car = 0xB12314E0;
					STREAMING::REQUEST_MODEL(car);
					veh[i] = VEHICLE::CREATE_VEHICLE(car, pos.x, pos.y, pos.z, heading, true, true);
					RequestingControl(veh[i]);
					ENTITY::ATTACH_ENTITY_TO_ENTITY(veh[i], get_player_ped, SKEL_Spine0, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
					WAIT(5);
				}
				for (int i = 0; i < max1; i++)
				{
					WAIT(100);
					RequestingControl(veh[i]);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh[i]);
					ENTITY::DETACH_ENTITY(veh[i], true, false);
					VEHICLE::DELETE_VEHICLE(&veh[i]);
				}
				IconNotification("\nFinish!\n\n", "Decider", "Crashes");
			}
		}
		break;
		case attach:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("删除所有附件"))
			{
				for (int i = 0; i < 3; i++) {
					Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
					GAMEPLAY::CLEAR_AREA_OF_PEDS(pos.x, pos.y, pos.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_OBJECTS(pos.x, pos.y, pos.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_VEHICLES(pos.x, pos.y, pos.z, 2, 0, 0, 0, 0, 0);
					for (int i = 0; i < objects.size(); i++) {
						Object obj = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, $(objects[i]), 0, 0, 1);
						if (ENTITY::DOES_ENTITY_EXIST(obj) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(obj, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer))) {
							ENTITY::DETACH_ENTITY(obj, 1, 1);
							ENTITY::SET_ENTITY_AS_MISSION_ENTITY(obj, 1, 1);
							ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
							ENTITY::DELETE_ENTITY(&obj);
							VEHICLE::DELETE_ALL_TRAINS();
						}
					}
				}
				Hash t20 = GAMEPLAY::GET_HASH_KEY("T20");
				Hash packer = GAMEPLAY::GET_HASH_KEY("packer");
				Hash stockade3 = GAMEPLAY::GET_HASH_KEY("stockade3");
				Hash airbus = GAMEPLAY::GET_HASH_KEY("airbus");
				Hash xa21 = GAMEPLAY::GET_HASH_KEY("xa21");
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
				Vehicle veh = VEHICLE::GET_CLOSEST_VEHICLE(pos.x, pos.y, pos.z, 10.0f, t20, 2);
				if (ENTITY::DOES_ENTITY_EXIST(t20) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(t20, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)) &&STREAMING::IS_MODEL_A_VEHICLE(t20))
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(t20);
					ENTITY::DETACH_ENTITY(t20, 1, 1);
					ENTITY::DETACH_ENTITY(veh, 1, 1);
					VEHICLE::DELETE_VEHICLE(&veh);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
					ENTITY::DELETE_ENTITY(&veh);
				}
				if (ENTITY::DOES_ENTITY_EXIST(packer) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(packer, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)) && STREAMING::IS_MODEL_A_VEHICLE(packer))
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(packer);
					ENTITY::DETACH_ENTITY(packer, 1, 1);
					ENTITY::DETACH_ENTITY(veh, 1, 1);
					VEHICLE::DELETE_VEHICLE(&veh);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
					ENTITY::DELETE_ENTITY(&veh);
				}
				if (ENTITY::DOES_ENTITY_EXIST(stockade3) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(stockade3, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)) && STREAMING::IS_MODEL_A_VEHICLE(stockade3))
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(stockade3);
					ENTITY::DETACH_ENTITY(stockade3, 1, 1);
					ENTITY::DETACH_ENTITY(veh, 1, 1);
					VEHICLE::DELETE_VEHICLE(&veh);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
					ENTITY::DELETE_ENTITY(&veh);
				}
				if (ENTITY::DOES_ENTITY_EXIST(airbus) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(airbus, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)) && STREAMING::IS_MODEL_A_VEHICLE(airbus))
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(airbus);
					ENTITY::DETACH_ENTITY(airbus, 1, 1);
					ENTITY::DETACH_ENTITY(veh, 1, 1);
					VEHICLE::DELETE_VEHICLE(&veh);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
					ENTITY::DELETE_ENTITY(&veh);
				}
				if (ENTITY::DOES_ENTITY_EXIST(xa21) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(xa21, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer)) && STREAMING::IS_MODEL_A_VEHICLE(xa21))
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(xa21);
					ENTITY::DETACH_ENTITY(xa21, 1, 1);
					ENTITY::DETACH_ENTITY(veh, 1, 1);
					VEHICLE::DELETE_VEHICLE(&veh);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
					ENTITY::DELETE_ENTITY(&veh);
				}
			}
			Menu::MenuOption("附加身体", attachself);
			Menu::MenuOption("附加物体", attachobj);
			Menu::MenuOption("附加国旗", attachflag);
			Menu::MenuOption("附加载具", attachveh);
		}
		break;
		case attachobj:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("橙色球"))
			{
				Hash orange = GAMEPLAY::GET_HASH_KEY("prop_juicestand");
				RequestingControl(orange);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(orange) && STREAMING::IS_MODEL_VALID(orange))
				{
					STREAMING::REQUEST_MODEL(orange);
					if (STREAMING::HAS_MODEL_LOADED(orange))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(orange, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("UFO"))
			{
				Hash UFO = GAMEPLAY::GET_HASH_KEY("p_spinning_anus_s");
				RequestingControl(UFO);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(UFO) && STREAMING::IS_MODEL_VALID(UFO))
				{
					STREAMING::REQUEST_MODEL(UFO);
					if (STREAMING::HAS_MODEL_LOADED(UFO))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(UFO, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("圣诞树"))
			{
				Hash xmas = GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int");
				RequestingControl(xmas);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(xmas) && STREAMING::IS_MODEL_VALID(xmas))
				{
					STREAMING::REQUEST_MODEL(xmas);
					if (STREAMING::HAS_MODEL_LOADED(xmas))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object objxmas = OBJECT::CREATE_OBJECT(xmas, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(objxmas, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("外星蛋"))
			{
				Hash egg = GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01");
				RequestingControl(egg);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(egg) && STREAMING::IS_MODEL_VALID(egg))
				{
					STREAMING::REQUEST_MODEL(egg);
					if (STREAMING::HAS_MODEL_LOADED(egg))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object objegg = OBJECT::CREATE_OBJECT(egg, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(objegg, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("大机枪"))
			{
				Hash railgun = GAMEPLAY::GET_HASH_KEY("hei_prop_carrier_defense_02");
				RequestingControl(railgun);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(railgun) && STREAMING::IS_MODEL_VALID(railgun))
				{
					STREAMING::REQUEST_MODEL(railgun);
					if (STREAMING::HAS_MODEL_LOADED(railgun))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj2 = OBJECT::CREATE_OBJECT(railgun, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj2, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("小JJ"))
			{
				Hash JJ = -422877666;
				RequestingControl(JJ);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(JJ) && STREAMING::IS_MODEL_VALID(JJ))
				{
					STREAMING::REQUEST_MODEL(JJ);
					if (STREAMING::HAS_MODEL_LOADED(JJ))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(JJ, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0x5c01, -0.05, 0.2, 0, -90, 0, 0, false, true, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("吉他"))
			{
				Hash guitar = GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01_d1");
				RequestingControl(guitar);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(guitar) && STREAMING::IS_MODEL_VALID(guitar))
				{
					STREAMING::REQUEST_MODEL(guitar);
					if (STREAMING::HAS_MODEL_LOADED(guitar))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object objguitar = OBJECT::CREATE_OBJECT(guitar, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(objguitar, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, -0.5f, 0.5f, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("火车"))
			{
				Hash Train = GAMEPLAY::GET_HASH_KEY("p_tram_crash_s");
				RequestingControl(Train);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(Train) && STREAMING::IS_MODEL_VALID(Train))
				{
					STREAMING::REQUEST_MODEL(Train);
					if (STREAMING::HAS_MODEL_LOADED(Train))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj3 = OBJECT::CREATE_OBJECT(Train, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj3, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("金属板"))
			{
				Hash Plate = GAMEPLAY::GET_HASH_KEY("p_oil_slick_01");
				RequestingControl(Plate);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(Plate) && STREAMING::IS_MODEL_VALID(Plate))
				{
					STREAMING::REQUEST_MODEL(Plate);
					if (STREAMING::HAS_MODEL_LOADED(Plate))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj4 = OBJECT::CREATE_OBJECT(Plate, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj4, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("ATM"))
			{
				Hash ATM = GAMEPLAY::GET_HASH_KEY("prop_atm_01");
				RequestingControl(ATM);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(ATM) && STREAMING::IS_MODEL_VALID(ATM))
				{
					STREAMING::REQUEST_MODEL(ATM);
					if (STREAMING::HAS_MODEL_LOADED(ATM))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj5 = OBJECT::CREATE_OBJECT(ATM, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj5, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("火堆"))
			{
				Hash FIRE = GAMEPLAY::GET_HASH_KEY("prop_beach_fire");
				RequestingControl(FIRE);
				if (STREAMING::IS_MODEL_IN_CDIMAGE(FIRE) && STREAMING::IS_MODEL_VALID(FIRE))
				{
					STREAMING::REQUEST_MODEL(FIRE);
					if (STREAMING::HAS_MODEL_LOADED(FIRE))
					{
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj6 = OBJECT::CREATE_OBJECT(FIRE, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj6, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
		}
		break;
		case attachflag:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("日本"))
			{
				Hash japan = GAMEPLAY::GET_HASH_KEY("prop_flag_japan");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(japan) && STREAMING::IS_MODEL_VALID(japan))
				{
					STREAMING::REQUEST_MODEL(japan);
					if (STREAMING::HAS_MODEL_LOADED(japan))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(japan, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("美国"))
			{
				Hash US = GAMEPLAY::GET_HASH_KEY("prop_flag_us");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(US) && STREAMING::IS_MODEL_VALID(US))
				{
					STREAMING::REQUEST_MODEL(US);
					if (STREAMING::HAS_MODEL_LOADED(US))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(US, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("加拿大"))
			{
				Hash canada = GAMEPLAY::GET_HASH_KEY("prop_flag_canada");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(canada) && STREAMING::IS_MODEL_VALID(canada))
				{
					STREAMING::REQUEST_MODEL(canada);
					if (STREAMING::HAS_MODEL_LOADED(canada))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(canada, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("苏格兰"))
			{
				Hash scotland = GAMEPLAY::GET_HASH_KEY("prop_flag_scotland_s");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(scotland) && STREAMING::IS_MODEL_VALID(scotland))
				{
					STREAMING::REQUEST_MODEL(scotland);
					if (STREAMING::HAS_MODEL_LOADED(scotland))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(scotland, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("俄罗斯"))
			{
				Hash russia = GAMEPLAY::GET_HASH_KEY("prop_flag_russia");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(russia) && STREAMING::IS_MODEL_VALID(russia))
				{
					STREAMING::REQUEST_MODEL(russia);
					if (STREAMING::HAS_MODEL_LOADED(russia))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(russia, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("德国"))
			{
				Hash german = GAMEPLAY::GET_HASH_KEY("prop_flag_german");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(german) && STREAMING::IS_MODEL_VALID(german))
				{
					STREAMING::REQUEST_MODEL(german);
					if (STREAMING::HAS_MODEL_LOADED(german))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(german, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("英国"))
			{
				Hash UK = GAMEPLAY::GET_HASH_KEY("prop_flag_uk_s");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(UK) && STREAMING::IS_MODEL_VALID(UK))
				{
					STREAMING::REQUEST_MODEL(UK);
					if (STREAMING::HAS_MODEL_LOADED(UK))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(UK, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("法国"))
			{
				Hash france = GAMEPLAY::GET_HASH_KEY("prop_flag_france");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(france) && STREAMING::IS_MODEL_VALID(france))
				{
					STREAMING::REQUEST_MODEL(france);
					if (STREAMING::HAS_MODEL_LOADED(france))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						Object obj1 = OBJECT::CREATE_OBJECT(france, pos.x, pos.y, pos.z, true, false, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(obj1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
		}
		break;
		case Esp:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("方框透视", selfespbox);
			Menu::Toggle("名称透视", selfespname);
			Menu::Toggle("直线透视", selfespline);
		}
		break;
		case attachself:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("分离自身"))
			{
				ENTITY::SET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID(), 0);
				Player playerped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				RequestControlOfEnt(playerped);
				int netID = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(playerped);
				NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netID, 1);
				request_control_id(netID);
				ENTITY::DETACH_ENTITY(playerped, 1, 0);
			}
			if (Menu::Option("附加到他"))
			{
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Player player_ped_id = PLAYER::PLAYER_PED_ID();
				ENTITY::ATTACH_ENTITY_TO_ENTITY(player_ped_id, get_player_ped, SKEL_Spine0, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
			}
			if (Menu::Option("附加到手"))
			{
				Player get_player_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer);
				Player player_ped_id = PLAYER::PLAYER_PED_ID();
				ENTITY::ATTACH_ENTITY_TO_ENTITY(player_ped_id, get_player_ped, SKEL_L_Hand, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
			}
		}
		break;
		case attachveh:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("附加T20"))
			{
				Hash t20 = GAMEPLAY::GET_HASH_KEY("T20");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(t20) && STREAMING::IS_MODEL_A_VEHICLE(t20))
				{
					STREAMING::REQUEST_MODEL(t20);
					if (STREAMING::HAS_MODEL_LOADED(t20))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
						Vehicle veh = VEHICLE::CREATE_VEHICLE(t20, pos.x, pos.y, pos.z, heading, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("附加货车"))
			{
				Hash packer = GAMEPLAY::GET_HASH_KEY("packer");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(packer) && STREAMING::IS_MODEL_A_VEHICLE(packer))
				{
					STREAMING::REQUEST_MODEL(packer);
					if (STREAMING::HAS_MODEL_LOADED(packer))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
						Vehicle veh = VEHICLE::CREATE_VEHICLE(packer, pos.x, pos.y, pos.z, heading, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("附加运钞车"))
			{
				Hash stockade3 = GAMEPLAY::GET_HASH_KEY("stockade3");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(stockade3) && STREAMING::IS_MODEL_A_VEHICLE(stockade3))
				{
					STREAMING::REQUEST_MODEL(stockade3);
					if (STREAMING::HAS_MODEL_LOADED(stockade3))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
						Vehicle veh = VEHICLE::CREATE_VEHICLE(stockade3, pos.x, pos.y, pos.z, heading, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("附加巴士"))
			{
				Hash airbus = GAMEPLAY::GET_HASH_KEY("airbus");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(airbus) && STREAMING::IS_MODEL_A_VEHICLE(airbus))
				{
					STREAMING::REQUEST_MODEL(airbus);
					if (STREAMING::HAS_MODEL_LOADED(airbus))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
						Vehicle veh = VEHICLE::CREATE_VEHICLE(airbus, pos.x, pos.y, pos.z, heading, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
			if (Menu::Option("附加XA21"))
			{
				Hash xa21 = GAMEPLAY::GET_HASH_KEY("xa21");
				if (STREAMING::IS_MODEL_IN_CDIMAGE(xa21) && STREAMING::IS_MODEL_A_VEHICLE(xa21))
				{
					STREAMING::REQUEST_MODEL(xa21);
					if (STREAMING::HAS_MODEL_LOADED(xa21))
					{
						Vector3 offset = { 0, 0, 0 };
						Vector3 rot = { 0, 0, 0 };
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), true);
						float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer));
						Vehicle veh = VEHICLE::CREATE_VEHICLE(xa21, pos.x, pos.y, pos.z, heading, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), SKEL_Spine1, 0, 0, 0, 0, 0, 0, false, false, false, true, 2, true);
					}
				}
			}
		}
		break;
#pragma endregion
#pragma region protection
		case protection:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("脚本事件", scriptprotection);
			Menu::MenuOption("网络事件", networkprotection);
			Menu::MenuOption("崩溃防护", crashprotection);
			Menu::MenuOption("其他保护", otherprotection);
			Menu::Break("~italic~快捷");
			if (Menu::Option("启用所有保护"))
			{
				antikick = true;
				antiinvite = true;
				antigiveweapon = true;
				antifreeze = true;
				antifire = true;
				antiexplosion = true;
				antiPTFX = true;
				antistar = true;
				antiremoveweapon = true;
				antirequsetcontrol = true;
				blockallnetworkevents = true;
				antireport = true;
				antistat = true;
				antidrop = true;
				antivotekick = true;
				antiattachment = true;
				anticage = true;
				blockobjCrash = true;
				blockPedCrash = true;
				blockvehCrash = true;
				SECrashprotex = true;
				nonhostkickprotex = true;
				antiSPKick = true;
				anticeokick = true;
				ceo_events = true;
				bannerprotex = true;
				blackscreen = true;
				Transaction_Error = true;
				antiapartmenttp = true;
				antiremotebounty = true;
				antiremotevehkick = true;
				load_screen = true;
				antiremoteforcemission = true;
			}
			if (Menu::Option("关闭所有保护"))
			{
				antikick = false;
				antiinvite = false;
				antigiveweapon = false;
				antifreeze = false;
				antifire = false;
				antiexplosion = false;
				antiPTFX = false;
				antistar = false;
				antiremoveweapon = false;
				antirequsetcontrol = false;
				blockallnetworkevents = false;
				antireport = false;
				antistat = false;
				antidrop = false;
				antivotekick = false;
				antiattachment = false;
				anticage = false;
				blockobjCrash = false;
				blockPedCrash = false;
				blockvehCrash = false;
				SECrashprotex = false;
				nonhostkickprotex = false;
				antiSPKick = false;
				anticeokick = false;
				ceo_events = false;
				bannerprotex = false;
				blackscreen = false;
				Transaction_Error = false;
				antiapartmenttp = false;
				antiremotebounty = false;
				antiremotevehkick = false;
				load_screen = false;
				antiremoteforcemission = false;
			}
		}
		break;
		case scriptprotection:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("脚本踢", antikick);
			Menu::Toggle("非主机踢", nonhostkickprotex);
			Menu::Toggle("踢到故事模式", antiSPKick);
			Menu::Toggle("CEO踢", anticeokick);
			Menu::Toggle("CEO禁令", ceo_events);
			Menu::Toggle("空横幅", bannerprotex);
			Menu::Toggle("无限黑屏", blackscreen);
			Menu::Toggle("交易错误", Transaction_Error);
			Menu::Toggle("公寓传送", antiapartmenttp);
			Menu::Toggle("给予悬赏", antiremotebounty);
			Menu::Toggle("踢出载具", antiremotevehkick);
			Menu::Toggle("无限加载屏幕", load_screen);
			Menu::Toggle("强制执行任务", antiremoteforcemission);
		}
		break;
		case networkprotection:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("冻结", antifreeze);
			Menu::Toggle("火焰", antifire);
			Menu::Toggle("爆炸", antiexplosion);
			Menu::Toggle("邀请", antiinvite);
			Menu::Toggle("粒子特效", antiPTFX);
			Menu::Toggle("给予武器", antigiveweapon);
			Menu::Toggle("移除武器", antiremoveweapon);
			Menu::Toggle("请求控制", antirequsetcontrol);
			Menu::Toggle("给予通缉等级", antistar);
			Menu::Toggle("拦截所有网络事件", blockallnetworkevents);
		}
		break;
		case otherprotection:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("拦截举报", antireport);
			Menu::Toggle("拦截统计", antistat);
			Menu::Toggle("拦截掉落", antidrop);
			Menu::Toggle("拦截笼子", anticage);
			Menu::Toggle("拦截货机", anticargoplane);
			Menu::Toggle("拦截投票踢", antivotekick);
			Menu::Toggle("拦截附加模型", antiattachment);
		}
		break;
		case crashprotection:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("防崩镜头", securitycam);
			Menu::Toggle("阻止无效模型崩溃", blockobjCrash);
			Menu::Toggle("阻止无效PED崩溃", blockPedCrash);
			Menu::Toggle("阻止无效载具崩溃", blockvehCrash);
			Menu::Toggle("阻止脚本事件崩溃", SECrashprotex);
			Menu::Toggle("~r~阻止所有物体靠近", blockallentity);
		}
		break;
#pragma endregion
#pragma region hotkey
		case hotkey:
		{
			Menu::Titlesky("Decider");
			Menu::Toggle("传送到标记点[F3]", teleportwayhotkey);
			Menu::Toggle("传送到任务点[F6]", tptoobjecthotkey);
		}
		break;
#pragma endregion
#pragma region Settings Menu
		case settings:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("菜单颜色", settingstheme);
			if (Menu::Option("加入Discord"))
			{
				WinExec("explorer.exe https://discord.gg/vGw3u6SbfH", SW_SHOW);//更改这个链接
			}
			if (Menu::Int("滚动条延迟", Menu::Settings::keyPressDelay2, 1, 200))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::keyPressDelay2 = NumberKeyboard();
				}
			}
			if (Menu::Int("Int选择延迟", Menu::Settings::keyPressDelay3, 1, 200))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::keyPressDelay3 = NumberKeyboard();
				}
			}
			Menu::Float("X轴位置", Menu::Settings::menuX, 0.17f, 1.f);
			Menu::MenuOption("快捷键", hotkey);
			Menu::MenuOption("~r~关闭GTA", exitgta);
		}
		break;
		case exitgta:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("是的船长！")) exit(0);
		}
		break;
		case settingstheme:
		{
			Menu::Titlesky("Decider");
			Menu::MenuOption("主题加载", themeloader);
			Menu::MenuOption("标题背景", settingstitlerect);
			Menu::MenuOption("滚动条", settingsscroller);
			Menu::MenuOption("选项文本", settingsoptiontext);
			if (Menu::Option("X轴+")) {
				if (Menu::Settings::menuX < 0.81f) Menu::Settings::menuX += 0.01f;
			}
			if (Menu::Option("X轴-")) {
				if (Menu::Settings::menuX > 0.17f) Menu::Settings::menuX -= 0.01f;
			}
		}
		break;
		case themeloader:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("红色主题")) {
				Menu::Settings::titleRect = { 100, 0, 0, 255 };
				Menu::Settings::scroller = { 100, 0, 0, 255 };
			}
			if (Menu::Option("蓝色主题")) {
				Menu::Settings::titleRect = { 0, 0, 200, 255 };
				Menu::Settings::scroller = { 0, 0, 200, 255 };
			}
			if (Menu::Option("绿色主题")) {
				Menu::Settings::titleRect = { 0, 180, 0, 255 };
				Menu::Settings::scroller = { 0, 0, 180, 255 };
			}
			if (Menu::Option("加载默认主题")) {
				Menu::Settings::titleText = { 255, 255, 255, 255, 7 };
				Menu::Settings::titleRect = { 150, 50, 50, 255 };
				Menu::Settings::scroller = { 150, 50, 50, 200 };
				Menu::Settings::optionText = { 255, 255, 255, 255, 0 };
				Menu::Settings::optionRect = { 0, 0, 0, 110 };
			}
		}
		break;
		case settingstitlerect:
		{
			Menu::Titlesky("Decider");
			if (Menu::Int("红色", Menu::Settings::titleRect.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.r = NumberKeyboard();
				}
			}
			if (Menu::Int("绿色", Menu::Settings::titleRect.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.g = NumberKeyboard();
				}
			}
			if (Menu::Int("蓝色", Menu::Settings::titleRect.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.b = NumberKeyboard();
				}
			}
			if (Menu::Int("不透明度", Menu::Settings::titleRect.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.a = NumberKeyboard();
				}
			}
		}
		break;
		case settingsoptiontext:
		{
			Menu::Titlesky("Decider");
			if (Menu::Int("红色", Menu::Settings::optionText.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.r = NumberKeyboard();
				}
			}
			if (Menu::Int("绿色", Menu::Settings::optionText.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.g = NumberKeyboard();
				}
			}
			if (Menu::Int("蓝色", Menu::Settings::optionText.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.b = NumberKeyboard();
				}
			}
			if (Menu::Int("不透明度", Menu::Settings::optionText.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.a = NumberKeyboard();
				}
			}
			Menu::MenuOption("字体", font);
		}
		break;
		case font:
		{
			Menu::Titlesky("Decider");
			if (Menu::Option("Chalet London")) { Menu::Settings::optionText.f = 0; }
			if (Menu::Option("House Script")) { Menu::Settings::optionText.f = 1; }
			if (Menu::Option("Monospace")) { Menu::Settings::optionText.f = 2; }
			if (Menu::Option("Wing Dings")) { Menu::Settings::optionText.f = 3; }
			if (Menu::Option("Chalet Comprime Cologne")) { Menu::Settings::optionText.f = 4; }
			if (Menu::Option("Pricedown")) { Menu::Settings::optionText.f = 7; }
		}
		break;
		case settingsscroller:
		{
			Menu::Titlesky("Decider");
			if (Menu::Int("红色", Menu::Settings::scroller.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.r = NumberKeyboard();
				}
			}
			if (Menu::Int("绿色", Menu::Settings::scroller.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.g = NumberKeyboard();
				}
			}
			if (Menu::Int("蓝色", Menu::Settings::scroller.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.b = NumberKeyboard();
				}
			}
			if (Menu::Int("不透明度", Menu::Settings::scroller.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.a = NumberKeyboard();
				}
			}
		}
		break;
#pragma endregion
		}
		Menu::End();
		WAIT(0);
		
    }
}

void ScriptMain() {
	srand(GetTickCount());
		
	main();
}